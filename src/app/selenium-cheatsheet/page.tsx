'use client';

import { useState } from 'react';
import DayLayout from '@/components/DayLayout';
import { ChevronDown, ChevronRight } from 'lucide-react';

export default function SeleniumCheatSheetPage() {
  const [expandedCategories, setExpandedCategories] = useState<string[]>([]);

  const toggleCategory = (categoryId: string) => {
    setExpandedCategories(prev => 
      prev.includes(categoryId) 
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const categories = [
    { 
      id: 'browser', 
      title: 'Browser and Navigation Commands', 
      commands: [
        { code: 'driver.get(URL)', description: 'Navigates to the specified URL in the current browser window.' },
        { code: 'driver.navigate().to(URL)', description: 'Navigates to the specified URL.' },
        { code: 'driver.navigate().back()', description: 'Moves the browser backward by one page.' },
        { code: 'driver.navigate().forward()', description: 'Moves the browser forward by one page.' },
        { code: 'driver.navigate().refresh()', description: 'Refreshes the current page.' },
        { code: 'driver.manage().window().maximize()', description: 'Maximizes the current browser window.' },
        { code: 'driver.manage().window().minimize()', description: 'Minimizes the current browser window.' },
        { code: 'driver.manage().window().fullscreen()', description: 'Sets the browser window to full screen.' },
        { code: 'driver.manage().window().getSize()', description: 'Retrieves the size (width and height) of the current browser window.' },
        { code: 'driver.manage().window().setSize(new Dimension(width, height))', description: 'Sets the size of the browser window.' },
        { code: 'driver.manage().window().getPosition()', description: 'Retrieves the current position of the browser window.' },
        { code: 'driver.manage().window().setPosition(new Point(x, y))', description: 'Sets the position of the browser window.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the implicit wait time for finding elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for a script to execute.' },
        { code: 'driver.switchTo().frame(frame)', description: 'Switches focus to a frame using its name or ID.' },
        { code: 'driver.switchTo().frame(int index)', description: 'Switches focus to a frame using its index number.' },
        { code: 'driver.switchTo().frame(webElement)', description: 'Switches focus to a frame using a WebElement.' },
        { code: 'driver.switchTo().defaultContent()', description: 'Switches back to the main document after working within a frame.' },
        { code: 'driver.switchTo().parentFrame()', description: 'Switches to the parent frame of the current frame.' },
        { code: 'driver.switchTo().alert()', description: 'Switches to an alert box.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts the currently displayed alert.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses the currently displayed alert.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from the alert box.' },
        { code: 'driver.switchTo().activeElement()', description: 'Switches to the currently focused element.' },
        { code: 'driver.switchTo().window(windowHandle)', description: 'Switches focus to the specified window handle.' },
        { code: 'driver.getWindowHandle()', description: 'Retrieves the handle of the current window.' },
        { code: 'driver.getWindowHandles()', description: 'Retrieves all window handles.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a cookie to the current browser session.' },
        { code: 'driver.manage().deleteCookieNamed("cookieName")', description: 'Deletes the cookie with the specified name.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies.' },
        { code: 'driver.manage().getCookies()', description: 'Retrieves all cookies.' },
        { code: 'driver.manage().getCookieNamed("cookieName")', description: 'Retrieves a specific cookie by name.' },
        { code: 'driver.getCurrentUrl()', description: 'Retrieves the URL of the current page.' },
        { code: 'driver.getTitle()', description: 'Retrieves the title of the current page.' },
        { code: 'driver.executeScript(script, arguments)', description: 'Executes JavaScript code in the context of the current page.' },
        { code: 'driver.executeAsyncScript(script, arguments)', description: 'Executes asynchronous JavaScript code in the context of the current page.' },
        { code: 'driver.findElement(By.id("id"))', description: 'Locates an element by its unique ID.' },
        { code: 'driver.findElement(By.name("name"))', description: 'Locates an element by its name attribute.' },
        { code: 'driver.findElement(By.className("className"))', description: 'Locates an element by its class name.' },
        { code: 'driver.findElement(By.tagName("tagName"))', description: 'Locates an element by its tag name.' },
        { code: 'driver.findElement(By.linkText("text"))', description: 'Locates a hyperlink element by its exact text.' },
        { code: 'driver.findElement(By.partialLinkText("partialText"))', description: 'Locates a hyperlink element by partial text.' },
        { code: 'driver.findElement(By.cssSelector("selector"))', description: 'Locates an element using a CSS selector.' },
        { code: 'driver.findElement(By.xpath("xpath"))', description: 'Locates an element using an XPath expression.' },
        { code: 'driver.findElements(By.id("id"))', description: 'Locates all elements matching the ID.' },
        { code: 'driver.findElements(By.name("name"))', description: 'Locates all elements matching the name attribute.' },
        { code: 'driver.findElements(By.className("className"))', description: 'Locates all elements matching the class name.' },
        { code: 'driver.findElements(By.tagName("tagName"))', description: 'Locates all elements matching the tag name.' },
        { code: 'driver.findElements(By.linkText("text"))', description: 'Locates all hyperlink elements matching the exact text.' },
        { code: 'driver.findElements(By.partialLinkText("partialText"))', description: 'Locates all hyperlink elements matching partial text.' },
        { code: 'driver.findElements(By.cssSelector("selector"))', description: 'Locates all elements matching the CSS selector.' },
        { code: 'driver.findElements(By.xpath("xpath"))', description: 'Locates all elements matching the XPath expression.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'An updated way to set the implicit wait time using the Duration class.' },
        { code: 'driver.manage().window().getRect()', description: 'Retrieves the position and size of the browser window as a Rectangle object.' },
        { code: 'driver.manage().window().setRect(new Rectangle(x, y, width, height))', description: 'Sets the position and size of the browser window.' },
        { code: 'driver.switchTo().frame(WebElement)', description: 'Switches focus to a frame using a WebElement reference.' },
        { code: 'driver.navigate().to("URL")', description: 'Opens a new URL in the browser.' },
        { code: 'driver.navigate().back()', description: 'Moves backward in the browser\'s history.' },
        { code: 'driver.navigate().forward()', description: 'Moves forward in the browser\'s history.' },
        { code: 'driver.navigate().refresh()', description: 'Refreshes the current page.' }
      ]
    },

    { id: 'window', title: 'Window Management Commands', commands: [
        { code: 'driver.manage().window().maximize()', description: 'Maximizes the current browser window.' },
        { code: 'driver.manage().window().minimize()', description: 'Minimizes the current browser window.' },
        { code: 'driver.manage().window().fullscreen()', description: 'Sets the browser window to full screen.' },
        { code: 'driver.manage().window().getSize()', description: 'Retrieves the size (width and height) of the current browser window.' },
        { code: 'driver.manage().window().setSize(new Dimension(width, height))', description: 'Sets the size of the browser window.' },
        { code: 'driver.manage().window().getPosition()', description: 'Retrieves the current position of the browser window.' },
        { code: 'driver.manage().window().setPosition(new Point(x, y))', description: 'Sets the position of the browser window.' },
        { code: 'driver.manage().window().getRect()', description: 'Retrieves the position and size of the browser window as a Rectangle object.' },
        { code: 'driver.manage().window().setRect(new Rectangle(x, y, width, height))', description: 'Sets the position and size of the browser window.' },
        { code: 'driver.getWindowHandle()', description: 'Retrieves the handle of the current window.' },
        { code: 'driver.getWindowHandles()', description: 'Retrieves all window handles.' },
        { code: 'driver.switchTo().window(windowHandle)', description: 'Switches focus to the specified window handle.' },
        { code: 'driver.close()', description: 'Closes the current window.' },
        { code: 'driver.quit()', description: 'Closes all windows and ends the WebDriver session.' },
        { code: 'driver.switchTo().newWindow(WindowType.TAB)', description: 'Opens a new tab in the current browser window.' },
        { code: 'driver.switchTo().newWindow(WindowType.WINDOW)', description: 'Opens a new browser window.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().iterator().next())', description: 'Switches to the first window in the list of window handles.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().toArray()[index])', description: 'Switches to a window using its index in the list of window handles.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().stream().filter(handle -> handle.equals(windowHandle)).findFirst().orElse(null))', description: 'Switches to a specific window handle using a stream filter.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().stream().reduce((first, second) -> second).orElse(null))', description: 'Switches to the last opened window handle.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().stream().findFirst().orElse(null))', description: 'Switches to the first opened window handle.' },
        { code: 'driver.getTitle()', description: 'Retrieves the title of the current page.' },
        { code: 'driver.getCurrentUrl()', description: 'Retrieves the URL of the current page.' },
        { code: 'driver.navigate().to(URL)', description: 'Opens a new URL in the current window.' },
        { code: 'driver.manage().window().setSize(new Dimension(width, height))', description: 'Sets the browser window size to the specified width and height.' },
        { code: 'driver.manage().window().setPosition(new Point(x, y))', description: 'Moves the browser window to the specified position on the screen.' },
        { code: 'driver.manage().window().maximize()', description: 'Maximizes the browser window to fill the screen.' },
        { code: 'driver.manage().window().fullscreen()', description: 'Switches the browser to full-screen mode.' },
        { code: 'driver.manage().window().minimize()', description: 'Minimizes the browser window to the taskbar.' },
        { code: 'driver.manage().window().getRect()', description: 'Gets the current size and position of the browser window as a Rectangle object.' },
        { code: 'driver.manage().window().setRect(new Rectangle(x, y, width, height))', description: 'Sets the size and position of the browser window.' },
        { code: 'driver.manage().window().getSize().getWidth()', description: 'Retrieves the width of the browser window.' },
        { code: 'driver.manage().window().getSize().getHeight()', description: 'Retrieves the height of the browser window.' },
        { code: 'driver.manage().window().getPosition().getX()', description: 'Retrieves the X-coordinate of the browser window\'s position.' },
        { code: 'driver.manage().window().getPosition().getY()', description: 'Retrieves the Y-coordinate of the browser window\'s position.' },
        { code: 'driver.manage().window().setSize(new Dimension(1920, 1080))', description: 'Sets the browser window size to 1920x1080 pixels.' },
        { code: 'driver.manage().window().setPosition(new Point(100, 100))', description: 'Moves the browser window to the position (100, 100) on the screen.' },
        { code: 'driver.manage().window().maximize()', description: 'Expands the browser window to fill the entire screen.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().toArray()[1])', description: 'Switches to the second window handle in the list.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().stream().findAny().orElse(null))', description: 'Switches to any available window handle.' },
        { code: 'driver.switchTo().window(driver.getWindowHandles().stream().sorted().findFirst().orElse(null))', description: 'Switches to the first sorted window handle.' },
        { code: 'driver.manage().window().getSize().getWidth()', description: 'Gets the width of the current browser window.' },
        { code: 'driver.manage().window().getSize().getHeight()', description: 'Gets the height of the current browser window.' },
        { code: 'driver.manage().window().getPosition().getX()', description: 'Gets the X position of the browser window.' },
        { code: 'driver.manage().window().getPosition().getY()', description: 'Gets the Y position of the browser window.' },
        { code: 'driver.manage().window().setRect(new Rectangle(0, 0, 1366, 768))', description: 'Sets the browser window size to 1366x768 pixels and position to (0, 0).' },
        { code: 'driver.manage().window().setRect(new Rectangle(200, 200, 1024, 768))', description: 'Sets the browser window size to 1024x768 pixels and position to (200, 200).' },
        { code: 'driver.manage().window().getRect().getWidth()', description: 'Gets the width of the current browser window rectangle.' },
        { code: 'driver.manage().window().getRect().getHeight()', description: 'Gets the height of the current browser window rectangle.' },
        { code: 'driver.manage().window().getRect().getX()', description: 'Gets the X position of the current browser window rectangle.' },
        { code: 'driver.manage().window().getRect().getY()', description: 'Gets the Y position of the current browser window rectangle.' },
        { code: 'driver.manage().window().setSize(new Dimension(800, 600))', description: 'Sets the browser window size to 800x600 pixels.' },
        { code: 'driver.manage().window().setPosition(new Point(50, 50))', description: 'Moves the browser window to the position (50, 50) on the screen.' }
      ] },
    { id: 'frame', title: 'Frame and IFrame Commands', commands: [
        { code: 'driver.switchTo().frame(frame)', description: 'Switches focus to a frame using its name or ID.' },
        { code: 'driver.switchTo().frame(int index)', description: 'Switches focus to a frame using its index number.' },
        { code: 'driver.switchTo().frame(webElement)', description: 'Switches focus to a frame using a WebElement reference.' },
        { code: 'driver.switchTo().defaultContent()', description: 'Switches back to the main document from a frame.' },
        { code: 'driver.switchTo().parentFrame()', description: 'Switches to the parent frame of the currently focused frame.' },
        { code: 'driver.switchTo().frame("frameName")', description: 'Switches focus to a frame using its name.' },
        { code: 'driver.switchTo().frame("frameId")', description: 'Switches focus to a frame using its ID.' },
        { code: 'driver.switchTo().frame(0)', description: 'Switches focus to the first frame on the page (index 0).' },
        { code: 'driver.switchTo().frame(1)', description: 'Switches focus to the second frame on the page (index 1).' },
        { code: 'driver.switchTo().frame(driver.findElement(By.tagName("iframe")))', description: 'Switches focus to the first iframe found on the page.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.name("frameName")))', description: 'Switches focus to a frame identified by its name.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.id("frameId")))', description: 'Switches focus to a frame identified by its ID.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@name=\'frameName\']")))', description: 'Switches focus to a frame identified by an XPath expression.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe#frameId")))', description: 'Switches focus to a frame identified by a CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.className("frameClassName")))', description: 'Switches focus to a frame identified by its class name.' },
        { code: 'driver.switchTo().defaultContent()', description: 'Returns to the main content from a nested frame.' },
        { code: 'driver.switchTo().parentFrame()', description: 'Returns to the immediate parent frame from a nested frame.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.id("nestedFrameId")).findElement(By.tagName("iframe")))', description: 'Switches to an iframe inside another frame.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.id("nestedFrameId")).findElement(By.name("nestedIframe")))', description: 'Switches to an iframe inside another frame identified by name.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'nestedFrameId\']")).findElement(By.cssSelector("iframe#nestedIframe")))', description: 'Switches to a nested iframe using XPath and CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[1]")))', description: 'Switches focus to the first iframe found on the page.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[last()]")))', description: 'Switches focus to the last iframe found on the page.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[position()=2]")))', description: 'Switches focus to the second iframe on the page using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[contains(@src, \'frameName\')]")))', description: 'Switches focus to a frame based on a partial match of the src attribute.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[starts-with(@id, \'frameIdPrefix\')]")))', description: 'Switches focus to a frame based on a prefix match of the ID attribute.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[not(@id=\'excludedFrameId\')]")))', description: 'Switches focus to a frame excluding a specific ID.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[class*=\'frameClassName\']")))', description: 'Switches focus to a frame based on a partial class name match.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[id^=\'frameIdPrefix\']")))', description: 'Switches focus to a frame based on an ID prefix match using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[id$=\'frameIdSuffix\']")))', description: 'Switches focus to a frame based on an ID suffix match using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[class~=\'frameClassName\']")))', description: 'Switches focus to a frame based on a class name containing a specific value using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@title=\'frameTitle\']")))', description: 'Switches focus to a frame identified by its title attribute.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@src=\'frameSrc\']")))', description: 'Switches focus to a frame identified by its src attribute.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[not(@src)]")))', description: 'Switches focus to a frame that does not have a src attribute.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[title=\'frameTitle\']")))', description: 'Switches focus to a frame identified by its title attribute using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[src$=\'frameSrcSuffix\']")))', description: 'Switches focus to a frame based on an ending match of the src attribute using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[src^=\'frameSrcPrefix\']")))', description: 'Switches focus to a frame based on a beginning match of the src attribute using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[src*=\'frameSrcSubstring\']")))', description: 'Switches focus to a frame based on a substring match of the src attribute using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'frameId\'][@class=\'frameClass\']")))', description: 'Switches focus to a frame based on both ID and class attributes using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@name=\'frameName\' and @title=\'frameTitle\']")))', description: 'Switches focus to a frame based on both name and title attributes using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'frameId\' and @src=\'frameSrc\']")))', description: 'Switches focus to a frame based on both ID and src attributes using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[contains(@title, \'frameTitleSubstring\')]")))', description: 'Switches focus to a frame based on a substring match of the title attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'frameId\' or @src=\'frameSrc\']")))', description: 'Switches focus to a frame based on either ID or src attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'frameId\' and not(@src)]")))', description: 'Switches focus to a frame based on ID attribute and without src attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@class=\'frameClass\' and contains(@src, \'frameSrcSubstring\')]")))', description: 'Switches focus to a frame based on class and substring match of the src attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@class=\'frameClass\' or @id=\'frameId\']")))', description: 'Switches focus to a frame based on class or ID attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[not(contains(@src, \'excludedSrcSubstring\'))]")))', description: 'Switches focus to a frame excluding a substring match of the src attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[contains(@title, \'titleSubstring\') or @id=\'frameId\']")))', description: 'Switches focus to a frame based on title substring or ID attribute using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[id|=\'frameIdPrefix\']")))', description: 'Switches focus to a frame based on a hyphen-separated list of ID prefixes using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[title$=\'frameTitleSuffix\']")))', description: 'Switches focus to a frame based on an ending match of the title attribute using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[class*=\'frameClassSubstring\']")))', description: 'Switches focus to a frame based on a class name substring match using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.cssSelector("iframe[title*=\'titleSubstring\']")))', description: 'Switches focus to a frame based on a title substring match using CSS selector.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@name=\'frameName\'][contains(@src, \'frameSrcSubstring\')]")))', description: 'Switches focus to a frame based on name and src substring match using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id=\'frameId\' and @title=\'frameTitle\']")))', description: 'Switches focus to a frame based on both ID and title attributes using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@name=\'frameName\'][not(@src=\'excludedSrc\')]")))', description: 'Switches focus to a frame based on name and excludes specific src using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@class=\'frameClass\'][not(@title=\'excludedTitle\')]")))', description: 'Switches focus to a frame based on class and excludes specific title using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[contains(@id, \'frameIdSubstring\')]")))', description: 'Switches focus to a frame based on an ID substring match using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[contains(@class, \'frameClassSubstring\')]")))', description: 'Switches focus to a frame based on a class substring match using XPath.' },
        { code: 'driver.switchTo().frame(driver.findElement(By.xpath("//iframe[starts-with(@id, \'frameIdPrefix\')]")))', description: 'Switches focus to a frame based on a prefix match of the ID attribute using XPath.' }
      ] },
    { id: 'alert', title: 'Alert Commands', commands: [
        { code: 'driver.switchTo().alert()', description: 'Switches to the currently displayed alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts the currently displayed alert.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses the currently displayed alert.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from the currently displayed alert.' },
        { code: 'driver.switchTo().alert().sendKeys("text")', description: 'Sends the specified text to the currently displayed prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts the alert or prompt.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses the alert or prompt.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text of the alert or prompt.' },
        { code: 'driver.switchTo().alert().sendKeys("input text")', description: 'Inputs text into a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts the confirmation dialog.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses the confirmation dialog.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the text of the confirmation dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("sample text")', description: 'Sends text to the prompt dialog.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts a prompt dialog with text.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses a prompt dialog without text.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves text from a prompt dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("text input")', description: 'Inputs text into a prompt dialog.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Confirms an alert dialog.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Cancels an alert dialog.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from an alert dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("input")', description: 'Types input into a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts an alert with a single button.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses an alert with a single button.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the text content of an alert with a single button.' },
        { code: 'driver.switchTo().alert().sendKeys("text")', description: 'Sends a text string to a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts a prompt alert with text.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses a prompt alert without entering text.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from a prompt alert.' },
        { code: 'driver.switchTo().alert().sendKeys("sample")', description: 'Inputs sample text into a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Confirms a prompt alert with provided text.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Cancels a prompt alert with provided text.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the prompt alert\'s message.' },
        { code: 'driver.switchTo().alert().sendKeys("example text")', description: 'Types example text into a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts a prompt dialog with example text.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses a prompt dialog with example text.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the message from a prompt dialog with example text.' },
        { code: 'driver.switchTo().alert().sendKeys("input example")', description: 'Enters input example into a prompt dialog.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts an example prompt dialog.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses an example prompt dialog.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves text from an example prompt dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("testing text")', description: 'Inputs testing text into a prompt dialog.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts a testing prompt dialog.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses a testing prompt dialog.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the testing text from a prompt dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("test input")', description: 'Sends test input to a prompt dialog.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Confirms a test prompt dialog.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Cancels a test prompt dialog.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from a test prompt dialog.' },
        { code: 'driver.switchTo().alert().sendKeys("text entry")', description: 'Types text entry into a prompt alert.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts a text entry prompt alert.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses a text entry prompt alert.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Gets the text from a text entry prompt alert.' }
      ] },
    { id: 'element-interaction', title: 'Element Interaction Commands', commands: [
        { code: 'driver.findElement(By.id("elementId"))', description: 'Finds an element by its ID attribute.' },
        { code: 'driver.findElement(By.name("elementName"))', description: 'Finds an element by its name attribute.' },
        { code: 'driver.findElement(By.className("className"))', description: 'Finds an element by its class name.' },
        { code: 'driver.findElement(By.tagName("tagName"))', description: 'Finds an element by its tag name.' },
        { code: 'driver.findElement(By.linkText("linkText"))', description: 'Finds a link element by its visible text.' },
        { code: 'driver.findElement(By.partialLinkText("partialText"))', description: 'Finds a link element by partial match of its visible text.' },
        { code: 'driver.findElement(By.xpath("xpathExpression"))', description: 'Finds an element using an XPath expression.' },
        { code: 'driver.findElement(By.cssSelector("cssSelector"))', description: 'Finds an element using a CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@name=\'username\']"))', description: 'Finds an input element with the name attribute \'username\'.' },
        { code: 'driver.findElement(By.cssSelector("input[name=\'username\']"))', description: 'Finds an input element with the name attribute \'username\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//button[text()=\'Submit\']"))', description: 'Finds a button element with the text \'Submit\'.' },
        { code: 'driver.findElement(By.cssSelector("button.submitButton"))', description: 'Finds a button element with the class \'submitButton\'.' },
        { code: 'driver.findElement(By.xpath("//div[@class=\'container\']//input"))', description: 'Finds an input element inside a div with class \'container\'.' },
        { code: 'driver.findElement(By.cssSelector("div.container input"))', description: 'Finds an input element inside a div with class \'container\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'text\']"))', description: 'Finds an input element with type \'text\'.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'text\']"))', description: 'Finds an input element with type \'text\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//textarea[@id=\'comments\']"))', description: 'Finds a textarea element with the ID \'comments\'.' },
        { code: 'driver.findElement(By.cssSelector("textarea#comments"))', description: 'Finds a textarea element with the ID \'comments\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[contains(@name, \'user\')]"))', description: 'Finds an input element with a name containing \'user\'.' },
        { code: 'driver.findElement(By.cssSelector("input[name*=\'user\']"))', description: 'Finds an input element with a name containing \'user\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//button[@class=\'btn btn-primary\']"))', description: 'Finds a button element with classes \'btn\' and \'btn-primary\'.' },
        { code: 'driver.findElement(By.cssSelector("button.btn.btn-primary"))', description: 'Finds a button element with classes \'btn\' and \'btn-primary\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//div[@id=\'main\']//span[text()=\'Hello\']"))', description: 'Finds a span element with text \'Hello\' inside a div with ID \'main\'.' },
        { code: 'driver.findElement(By.cssSelector("div#main span.hello"))', description: 'Finds a span element with class \'hello\' inside a div with ID \'main\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//a[@href=\'/home\']"))', description: 'Finds an anchor element with href attribute \'/home\'.' },
        { code: 'driver.findElement(By.cssSelector("a[href=\'/home\']"))', description: 'Finds an anchor element with href attribute \'/home\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'checkbox\' and @checked]"))', description: 'Finds a checked checkbox input element.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'checkbox\']:checked"))', description: 'Finds a checked checkbox input element using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'radio\' and @value=\'option1\']"))', description: 'Finds a radio button input element with value \'option1\'.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'radio\'][value=\'option1\']"))', description: 'Finds a radio button input element with value \'option1\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//select[@name=\'options\']//option[text()=\'Option 1\']"))', description: 'Finds an option element with text \'Option 1\' inside a select element with name \'options\'.' },
        { code: 'driver.findElement(By.cssSelector("select[name=\'options\'] option[value=\'1\']"))', description: 'Finds an option element with value \'1\' inside a select element with name \'options\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//form[@id=\'loginForm\']//input[@name=\'password\']"))', description: 'Finds a password input element inside a form with ID \'loginForm\'.' },
        { code: 'driver.findElement(By.cssSelector("form#loginForm input[name=\'password\']"))', description: 'Finds a password input element inside a form with ID \'loginForm\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//div[contains(@class, \'alert\')]/button"))', description: 'Finds a button element inside a div with class containing \'alert\'.' },
        { code: 'driver.findElement(By.cssSelector("div.alert button"))', description: 'Finds a button element inside a div with class \'alert\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//table[@id=\'data\']//tr[1]/td[2]"))', description: 'Finds a table cell in the first row and second column of a table with ID \'data\'.' },
        { code: 'driver.findElement(By.cssSelector("table#data tr:nth-child(1) td:nth-child(2)"))', description: 'Finds a table cell in the first row and second column using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//div[@id=\'sidebar\']//a[contains(text(), \'Home\')]"))', description: 'Finds an anchor element containing text \'Home\' inside a div with ID \'sidebar\'.' },
        { code: 'driver.findElement(By.cssSelector("div#sidebar a:contains(\'Home\')"))', description: 'Finds an anchor element containing text \'Home\' inside a div with ID \'sidebar\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@name=\'search\']"))', description: 'Finds a search input element by its name attribute.' },
        { code: 'driver.findElement(By.cssSelector("input[name=\'search\']"))', description: 'Finds a search input element by its name attribute using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//button[contains(@class, \'submit\')]"))', description: 'Finds a button element with class containing \'submit\'.' },
        { code: 'driver.findElement(By.cssSelector("button.submit"))', description: 'Finds a button element with class \'submit\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//a[@class=\'nav-link\'][text()=\'Contact\']"))', description: 'Finds a link with text \'Contact\' and class \'nav-link\'.' },
        { code: 'driver.findElement(By.cssSelector("a.nav-link:contains(\'Contact\')"))', description: 'Finds a link with text \'Contact\' and class \'nav-link\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'text\' and @placeholder=\'Search\']"))', description: 'Finds a text input element with placeholder \'Search\'.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'text\'][placeholder=\'Search\']"))', description: 'Finds a text input element with placeholder \'Search\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//form[@id=\'searchForm\']//input[@name=\'query\']"))', description: 'Finds an input element with name \'query\' inside a form with ID \'searchForm\'.' },
        { code: 'driver.findElement(By.cssSelector("form#searchForm input[name=\'query\']"))', description: 'Finds an input element with name \'query\' inside a form with ID \'searchForm\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//span[@class=\'error-message\']"))', description: 'Finds a span element with class \'error-message\'.' },
        { code: 'driver.findElement(By.cssSelector("span.error-message"))', description: 'Finds a span element with class \'error-message\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'submit\']"))', description: 'Finds a submit button input element.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'submit\']"))', description: 'Finds a submit button input element using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//div[@id=\'content\']//button[text()=\'Submit\']"))', description: 'Finds a submit button inside a div with ID \'content\'.' },
        { code: 'driver.findElement(By.cssSelector("div#content button.submit"))', description: 'Finds a submit button inside a div with ID \'content\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'email\' and @name=\'email\']"))', description: 'Finds an email input element with name \'email\'.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'email\'][name=\'email\']"))', description: 'Finds an email input element with name \'email\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//select[@id=\'dropdown\']//option[text()=\'Option A\']"))', description: 'Finds an option with text \'Option A\' inside a select element with ID \'dropdown\'.' },
        { code: 'driver.findElement(By.cssSelector("select#dropdown option[value=\'A\']"))', description: 'Finds an option with value \'A\' inside a select element with ID \'dropdown\' using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//input[@type=\'file\']"))', description: 'Finds a file input element.' },
        { code: 'driver.findElement(By.cssSelector("input[type=\'file\']"))', description: 'Finds a file input element using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//textarea[@rows=\'4\']"))', description: 'Finds a textarea element with 4 rows.' },
        { code: 'driver.findElement(By.cssSelector("textarea[rows=\'4\']"))', description: 'Finds a textarea element with 4 rows using CSS selector.' },
        { code: 'driver.findElement(By.xpath("//button[@type=\'button\' and text()=\'Cancel\']"))', description: 'Finds a button element with type \'button\' and text \'Cancel\'.' },
        { code: 'driver.findElement(By.cssSelector("button[type=\'button\']:contains(\'Cancel\')"))', description: 'Finds a button element with type \'button\' and text \'Cancel\' using CSS selector.' }
      ] },
    { id: 'element-action', title: 'Element Action Commands', commands: [
        { code: 'element.click()', description: 'Clicks on the specified element.' },
        { code: 'element.sendKeys("text")', description: 'Sends the specified text to the element, simulating keyboard input.' },
        { code: 'element.clear()', description: 'Clears the text input field.' },
        { code: 'element.submit()', description: 'Submits the form containing the element.' },
        { code: 'element.getAttribute("attributeName")', description: 'Retrieves the value of the specified attribute of the element.' },
        { code: 'element.getText()', description: 'Gets the visible text of the element.' },
        { code: 'element.isDisplayed()', description: 'Checks if the element is visible on the page.' },
        { code: 'element.isEnabled()', description: 'Checks if the element is enabled.' },
        { code: 'element.isSelected()', description: 'Checks if the element is selected, applicable for checkboxes and radio buttons.' },
        { code: 'actions.moveToElement(element).perform()', description: 'Hovers the mouse over the specified element (requires Actions class).' },
        { code: 'actions.doubleClick(element).perform()', description: 'Double-clicks on the specified element (requires Actions class).' },
        { code: 'actions.contextClick(element).perform()', description: 'Performs a right-click on the element (requires Actions class).' },
        { code: 'actions.dragAndDrop(source, target).perform()', description: 'Drags an element from source to target (requires Actions class).' },
        { code: 'actions.moveToElement(element).perform()', description: 'Moves the mouse to the center of the specified element (requires Actions class).' },
        { code: 'actions.clickAndHold(element).perform()', description: 'Clicks and holds the specified element (requires Actions class).' },
        { code: 'actions.release(element).perform()', description: 'Releases the held element (requires Actions class).' },
        { code: 'actions.perform()', description: 'Executes all actions in the Actions class (requires Actions class).' },
        { code: 'element.sendKeys(Keys.ENTER)', description: 'Sends the Enter key to the element.' },
        { code: 'element.sendKeys(Keys.TAB)', description: 'Sends the Tab key to the element.' },
        { code: 'element.sendKeys(Keys.BACK_SPACE)', description: 'Sends the Backspace key to the element.' },
        { code: 'element.sendKeys(Keys.ESCAPE)', description: 'Sends the Escape key to the element.' },
        { code: 'element.sendKeys(Keys.CONTROL, "a")', description: 'Sends Ctrl+A key combination to the element.' },
        { code: 'element.sendKeys(Keys.CONTROL, "c")', description: 'Sends Ctrl+C key combination to the element.' },
        { code: 'element.sendKeys(Keys.CONTROL, "v")', description: 'Sends Ctrl+V key combination to the element.' },
        { code: 'element.sendKeys(Keys.CONTROL, "x")', description: 'Sends Ctrl+X key combination to the element.' },
        { code: 'driver.executeScript("arguments[0].scrollIntoView(true);", element)', description: 'Scrolls the element into view using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].click();", element)', description: 'Clicks on the element using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].value=\'text\';", element)', description: 'Sets the value of an input field using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].style.border=\'2px solid red\';", element)', description: 'Highlights the element by changing its border color using JavaScript.' },
        { code: 'driver.executeScript("return arguments[0].innerHTML;", element)', description: 'Retrieves the HTML content of the element using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].scrollBy(0, -100);", element)', description: 'Scrolls the element up by 100 pixels using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].focus();", element)', description: 'Focuses on the element using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].blur();", element)', description: 'Removes focus from the element using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].select();", element)', description: 'Selects the content of a text input field using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].setAttribute(\'attributeName\', \'value\');", element)', description: 'Sets an attribute of the element using JavaScript.' },
        { code: 'driver.executeScript("arguments[0].click();", element)', description: 'Clicks the element using JavaScript.' },
        { code: 'element.sendKeys(Keys.PAGE_DOWN)', description: 'Sends the Page Down key to scroll down the page.' },
        { code: 'element.sendKeys(Keys.PAGE_UP)', description: 'Sends the Page Up key to scroll up the page.' },
        { code: 'element.sendKeys(Keys.HOME)', description: 'Sends the Home key to move the cursor to the beginning of the line.' },
        { code: 'element.sendKeys(Keys.END)', description: 'Sends the End key to move the cursor to the end of the line.' },
        { code: 'element.sendKeys(Keys.ARROW_DOWN)', description: 'Sends the Down Arrow key to navigate down.' },
        { code: 'element.sendKeys(Keys.ARROW_UP)', description: 'Sends the Up Arrow key to navigate up.' },
        { code: 'element.sendKeys(Keys.ARROW_LEFT)', description: 'Sends the Left Arrow key to navigate left.' },
        { code: 'element.sendKeys(Keys.ARROW_RIGHT)', description: 'Sends the Right Arrow key to navigate right.' },
        { code: 'driver.findElement(By.xpath("xpath")).click()', description: 'Clicks on an element located by XPath.' },
        { code: 'driver.findElement(By.cssSelector("cssSelector")).sendKeys("text")', description: 'Sends text to an element located by CSS selector.' },
        { code: 'driver.findElement(By.id("elementId")).clear()', description: 'Clears the text input field of an element located by ID.' },
        { code: 'driver.findElement(By.name("elementName")).submit()', description: 'Submits the form containing the element located by name.' },
        { code: 'driver.findElement(By.className("className")).getAttribute("attributeName")', description: 'Retrieves the value of the specified attribute from an element located by class name.' },
        { code: 'driver.findElement(By.tagName("tagName")).getText()', description: 'Gets the visible text from an element located by tag name.' },
        { code: 'driver.findElement(By.linkText("linkText")).click()', description: 'Clicks on a link element located by visible text.' },
        { code: 'driver.findElement(By.partialLinkText("partialText")).click()', description: 'Clicks on a link element located by partial text.' },
        { code: 'driver.findElement(By.xpath("//input")).sendKeys("text")', description: 'Sends text to an input element located by XPath.' },
        { code: 'driver.findElement(By.cssSelector("input")).click()', description: 'Clicks on an input element located by CSS selector.' },
        { code: 'driver.findElement(By.xpath("//button")).click()', description: 'Clicks on a button element located by XPath.' },
        { code: 'driver.findElement(By.cssSelector("button")).click()', description: 'Clicks on a button element located by CSS selector.' }
      ] },
    { id: 'wait', title: 'Wait Commands', commands: [
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10))', description: 'Sets an implicit wait of 10 seconds for the WebDriver to wait for elements to be available.' },
        { code: 'WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));', description: 'Creates a WebDriverWait instance with a timeout of 10 seconds.' },
        { code: 'wait.until(ExpectedConditions.visibilityOf(element))', description: 'Waits until the specified element is visible on the page.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(element))', description: 'Waits until the specified element is clickable.' },
        { code: 'wait.until(ExpectedConditions.titleIs("Page Title"))', description: 'Waits until the page title matches the specified title.' },
        { code: 'wait.until(ExpectedConditions.urlContains("partOfUrl"))', description: 'Waits until the current URL contains the specified substring.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElement(element, "text"))', description: 'Waits until the specified text is present in the given element.' },
        { code: 'wait.until(ExpectedConditions.elementToBeSelected(element))', description: 'Waits until the specified element is selected.' },
        { code: 'wait.until(ExpectedConditions.invisibilityOf(element))', description: 'Waits until the specified element is not visible.' },
        { code: 'wait.until(ExpectedConditions.stalenessOf(element))', description: 'Waits until the specified element is no longer attached to the DOM.' },
        { code: 'wait.until(ExpectedConditions.alertIsPresent())', description: 'Waits until an alert is present on the page.' },
        { code: 'wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(frameElement))', description: 'Waits until the specified frame is available and switches to it.' },
        { code: 'wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(By.xpath("xpath"), 5))', description: 'Waits until the number of elements located by the XPath is greater than 5.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.id("elementId")))', description: 'Waits until the element located by ID is clickable.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("className")))', description: 'Waits until the element located by class name is visible.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tagName")))', description: 'Waits until the element located by XPath is visible.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("cssSelector")))', description: 'Waits until the element located by CSS selector is visible.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElementLocated(By.name("elementName"), "text"))', description: 'Waits until the specified text is present in the element located by name.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElementLocated(By.xpath("//element"), "text"))', description: 'Waits until the specified text is present in the element located by XPath.' },
        { code: 'wait.until(ExpectedConditions.attributeToBe(By.id("elementId"), "attributeName", "value"))', description: 'Waits until the specified attribute of the element located by ID has the specified value.' },
        { code: 'wait.until(ExpectedConditions.attributeToBe(By.cssSelector("cssSelector"), "attributeName", "value"))', description: 'Waits until the specified attribute of the element located by CSS selector has the specified value.' },
        { code: 'wait.until(ExpectedConditions.textToBe(By.className("className"), "text"))', description: 'Waits until the text of the element located by class name matches the specified text.' },
        { code: 'wait.until(ExpectedConditions.titleContains("partialTitle"))', description: 'Waits until the page title contains the specified partial title.' },
        { code: 'wait.until(ExpectedConditions.urlToBe("http://example.com"))', description: 'Waits until the current URL matches the specified URL.' },
        { code: 'wait.until(ExpectedConditions.urlMatches("regexPattern"))', description: 'Waits until the current URL matches the specified regex pattern.' },
        { code: 'wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id("frameId")))', description: 'Waits until the frame located by ID is available and switches to it.' },
        { code: 'wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.xpath("//iframe")))', description: 'Waits until the frame located by XPath is available and switches to it.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button")))', description: 'Waits until the button element located by XPath is clickable.' },
        { code: 'wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("elementId")))', description: 'Waits until the element located by ID is not visible.' },
        { code: 'wait.until(ExpectedConditions.stalenessOfElementLocated(By.name("elementName")))', description: 'Waits until the element located by name is no longer attached to the DOM.' },
        { code: 'wait.until(ExpectedConditions.alertIsPresent())', description: 'Waits until an alert is present on the page.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button.submit")))', description: 'Waits until the button element located by CSS selector is clickable.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElementLocated(By.className("message"), "Success"))', description: 'Waits until the text \'Success\' is present in the element located by class name.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.className("submitButton")))', description: 'Waits until the element located by class name is clickable.' },
        { code: 'wait.until(ExpectedConditions.titleContains("Dashboard"))', description: 'Waits until the page title contains \'Dashboard\'.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@type=\'submit\']")))', description: 'Waits until the submit button element located by XPath is clickable.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Login")))', description: 'Waits until the link with text \'Login\' is visible.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElementLocated(By.xpath("//div[@id=\'message\']"), "Welcome"))', description: 'Waits until the text \'Welcome\' is present in the element located by XPath.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@href=\'logout\']")))', description: 'Waits until the link element with href \'logout\' is clickable.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("span.error")))', description: 'Waits until the span element with class \'error\' is visible.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@type=\'submit\']")))', description: 'Waits until the submit button element located by XPath is clickable.' },
        { code: 'wait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("div.alert"), "Error"))', description: 'Waits until the text \'Error\' is present in the element located by CSS selector.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h1[text()=\'Welcome\']")))', description: 'Waits until the h1 element with text \'Welcome\' is visible.' },
        { code: 'wait.until(ExpectedConditions.urlToBe("https://example.com/home"))', description: 'Waits until the current URL matches \'https://example.com/home\'.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("username")))', description: 'Waits until the element with ID \'username\' is visible.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[text()=\'Help\']")))', description: 'Waits until the link with text \'Help\' is clickable.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@type=\'text\']")))', description: 'Waits until the text input field element located by XPath is clickable.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[type=\'password\']")))', description: 'Waits until the password input field is visible.' },
        { code: 'wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.xpath("//iframe[@name=\'frame\']")))', description: 'Waits until the iframe with name \'frame\' is available and switches to it.' },
        { code: 'wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id=\'submit\']")))', description: 'Waits until the button with ID \'submit\' is clickable.' },
        { code: 'wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("searchField")))', description: 'Waits until the search field element located by name is visible.' }
      ] },
    { id: 'keyboard-mouse', title: 'Keyboard and Mouse Action Commands (Advanced User Interactions)', commands: [
        { code: 'Actions actions = new Actions(driver)', description: 'Creates a new Actions instance for performing advanced user interactions.' },
        { code: 'actions.moveToElement(element).perform()', description: 'Moves the mouse to the center of the specified element and performs the action.' },
        { code: 'actions.click(element).perform()', description: 'Clicks on the specified element.' },
        { code: 'actions.doubleClick(element).perform()', description: 'Double-clicks on the specified element.' },
        { code: 'actions.contextClick(element).perform()', description: 'Performs a right-click on the specified element.' },
        { code: 'actions.clickAndHold(element).perform()', description: 'Clicks and holds the specified element.' },
        { code: 'actions.release(element).perform()', description: 'Releases the held element.' },
        { code: 'actions.dragAndDrop(source, target).perform()', description: 'Drags an element from the source to the target.' },
        { code: 'actions.sendKeys(Keys.ENTER).perform()', description: 'Sends the Enter key to the element.' },
        { code: 'actions.sendKeys(Keys.TAB).perform()', description: 'Sends the Tab key to the element.' },
        { code: 'actions.sendKeys(Keys.BACK_SPACE).perform()', description: 'Sends the Backspace key to the element.' },
        { code: 'actions.sendKeys(Keys.ESCAPE).perform()', description: 'Sends the Escape key to the element.' },
        { code: 'actions.sendKeys(Keys.CONTROL, "a").perform()', description: 'Sends Ctrl+A key combination to the element.' },
        { code: 'actions.sendKeys(Keys.CONTROL, "c").perform()', description: 'Sends Ctrl+C key combination to the element.' },
        { code: 'actions.sendKeys(Keys.CONTROL, "v").perform()', description: 'Sends Ctrl+V key combination to the element.' },
        { code: 'actions.sendKeys(Keys.CONTROL, "x").perform()', description: 'Sends Ctrl+X key combination to the element.' },
        { code: 'actions.moveToElement(element, offsetX, offsetY).perform()', description: 'Moves the mouse to the specified offset from the center of the element.' },
        { code: 'actions.keyDown(Keys.SHIFT).sendKeys("text").keyUp(Keys.SHIFT).perform()', description: 'Sends text with Shift key held down.' },
        { code: 'actions.keyDown(Keys.ALT).sendKeys("text").keyUp(Keys.ALT).perform()', description: 'Sends text with Alt key held down.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("text").keyUp(Keys.CONTROL).perform()', description: 'Sends text with Ctrl key held down.' },
        { code: 'actions.pause(Duration.ofSeconds(2)).perform()', description: 'Pauses the execution for 2 seconds.' },
        { code: 'actions.moveByOffset(100, 200).perform()', description: 'Moves the mouse by an offset of 100 pixels horizontally and 200 pixels vertically.' },
        { code: 'actions.moveToElement(element).click().perform()', description: 'Moves to the element and clicks on it.' },
        { code: 'actions.doubleClick().perform()', description: 'Double-clicks at the current mouse position.' },
        { code: 'actions.contextClick().perform()', description: 'Right-clicks at the current mouse position.' },
        { code: 'actions.clickAndHold().perform()', description: 'Clicks and holds at the current mouse position.' },
        { code: 'actions.dragAndDropBy(source, 100, 200).perform()', description: 'Drags an element from the source to a position offset by 100 pixels horizontally and 200 pixels vertically.' },
        { code: 'actions.scrollByAmount(0, 100).perform()', description: 'Scrolls vertically by 100 pixels.' },
        { code: 'actions.scrollByAmount(100, 0).perform()', description: 'Scrolls horizontally by 100 pixels.' },
        { code: 'actions.sendKeys(Keys.PAGE_DOWN).perform()', description: 'Sends the Page Down key to scroll down the page.' },
        { code: 'actions.sendKeys(Keys.PAGE_UP).perform()', description: 'Sends the Page Up key to scroll up the page.' },
        { code: 'actions.sendKeys(Keys.HOME).perform()', description: 'Sends the Home key to move the cursor to the start of the line.' },
        { code: 'actions.sendKeys(Keys.END).perform()', description: 'Sends the End key to move the cursor to the end of the line.' },
        { code: 'actions.sendKeys(Keys.ARROW_DOWN).perform()', description: 'Sends the Down Arrow key to navigate down.' },
        { code: 'actions.sendKeys(Keys.ARROW_UP).perform()', description: 'Sends the Up Arrow key to navigate up.' },
        { code: 'actions.sendKeys(Keys.ARROW_LEFT).perform()', description: 'Sends the Left Arrow key to navigate left.' },
        { code: 'actions.sendKeys(Keys.ARROW_RIGHT).perform()', description: 'Sends the Right Arrow key to navigate right.' },
        { code: 'actions.moveToElement(element).keyDown(Keys.CONTROL).click().keyUp(Keys.CONTROL).perform()', description: 'Moves to the element, holds Ctrl key, clicks on the element, and then releases Ctrl key.' },
        { code: 'actions.moveToElement(element).keyDown(Keys.SHIFT).click().keyUp(Keys.SHIFT).perform()', description: 'Moves to the element, holds Shift key, clicks on the element, and then releases Shift key.' },
        { code: 'actions.moveToElement(element).clickAndHold().moveByOffset(50, 50).release().perform()', description: 'Clicks and holds an element, moves by an offset, and then releases.' },
        { code: 'actions.sendKeys(Keys.F5).perform()', description: 'Sends the F5 key to refresh the page.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("t").keyUp(Keys.CONTROL).perform()', description: 'Sends Ctrl+T key combination to open a new tab.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("w").keyUp(Keys.CONTROL).perform()', description: 'Sends Ctrl+W key combination to close the current tab.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("n").keyUp(Keys.CONTROL).perform()', description: 'Sends Ctrl+N key combination to open a new window.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("p").keyUp(Keys.CONTROL).perform()', description: 'Sends Ctrl+P key combination to open the print dialog.' },
        { code: 'actions.keyDown(Keys.CONTROL).sendKeys("s").keyUp(Keys.CONTROL).perform()', description: 'Sends Ctrl+S key combination to open the save dialog.' },
        { code: 'actions.keyDown(Keys.ALT).sendKeys("f4").keyUp(Keys.ALT).perform()', description: 'Sends Alt+F4 key combination to close the current window.' },
        { code: 'actions.sendKeys(Keys.INSERT).perform()', description: 'Sends the Insert key to toggle between insert and overwrite mode.' },
        { code: 'actions.sendKeys(Keys.DELETE).perform()', description: 'Sends the Delete key to remove the next character.' },
        { code: 'actions.sendKeys(Keys.BACK_SPACE).perform()', description: 'Sends the Backspace key to remove the previous character.' },
        { code: 'actions.moveToElement(element).click().sendKeys("text").perform()', description: 'Moves to the element, clicks on it, and sends text.' },
        { code: 'actions.moveToElement(element).click().sendKeys(Keys.TAB).perform()', description: 'Moves to the element, clicks on it, and sends the Tab key to move focus.' },
        { code: 'actions.moveToElement(element).sendKeys(Keys.ENTER).perform()', description: 'Moves to the element and sends the Enter key.' },
        { code: 'actions.moveToElement(element).sendKeys(Keys.ESCAPE).perform()', description: 'Moves to the element and sends the Escape key.' }
      ] },
    { id: 'cookies', title: 'Cookies Management Commands', commands: [
        { code: 'driver.manage().getCookies()', description: 'Retrieves all cookies visible to the current page.' },
        { code: 'driver.manage().getCookieNamed("cookieName")', description: 'Retrieves a specific cookie by its name.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a new cookie with the specified name and value.' },
        { code: 'driver.manage().deleteCookieNamed("cookieName")', description: 'Deletes a specific cookie by its name.' },
        { code: 'driver.manage().deleteCookie(cookie)', description: 'Deletes the specified cookie object.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies associated with the current domain.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getName()', description: 'Retrieves the name of a specific cookie.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getValue()', description: 'Retrieves the value of a specific cookie.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getDomain()', description: 'Retrieves the domain of a specific cookie.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getPath()', description: 'Retrieves the path of a specific cookie.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getExpiry()', description: 'Retrieves the expiry date of a specific cookie.' },
        { code: 'driver.manage().getCookies().size()', description: 'Retrieves the number of cookies visible to the current page.' },
        { code: 'driver.manage().getCookies().contains(new Cookie("name", "value"))', description: 'Checks if a specific cookie exists.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> "name".equals(cookie.getName())).findFirst()', description: 'Finds a specific cookie by name.' },
        { code: 'driver.manage().getCookies().forEach(cookie -> System.out.println(cookie.getName() + ": " + cookie.getValue()))', description: 'Prints all cookies and their values.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date()))', description: 'Adds a new cookie with domain, path, and expiry date.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, null, new Date()))', description: 'Adds a new cookie with only name, value, and expiry date.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path"))', description: 'Adds a new cookie with domain and path.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, "/path"))', description: 'Adds a new cookie with path only.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", null, new Date()))', description: 'Adds a new cookie with domain and expiry date.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, null, new Date()))', description: 'Adds a new cookie with expiry date only.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain"))', description: 'Adds a new cookie with domain only.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "/path"))', description: 'Adds a new cookie with path only.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a new cookie with default domain and path.' },
        { code: 'driver.manage().getCookieNamed("cookieName").toString()', description: 'Converts a specific cookie to a string representation.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, true))', description: 'Adds a secure and HTTP-only cookie.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, false))', description: 'Adds a non-secure and non-HTTP-only cookie.' },
        { code: 'driver.manage().deleteCookie(new Cookie("name", "value"))', description: 'Deletes a cookie based on its name and value.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies for the current domain.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getExpiry() != null).collect(Collectors.toList())', description: 'Retrieves all cookies with expiry dates.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getDomain().equals("domain")).collect(Collectors.toList())', description: 'Retrieves all cookies for a specific domain.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getPath().equals("/path")).collect(Collectors.toList())', description: 'Retrieves all cookies for a specific path.' },
        { code: 'driver.manage().getCookieNamed("cookieName").isHttpOnly()', description: 'Checks if a specific cookie is HTTP-only.' },
        { code: 'driver.manage().getCookieNamed("cookieName").isSecure()', description: 'Checks if a specific cookie is secure.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true))', description: 'Adds a secure cookie with expiry date.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", null, false))', description: 'Adds a non-secure cookie without expiry date.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> "name".equals(cookie.getName())).forEach(cookie -> System.out.println(cookie.getValue()))', description: 'Retrieves and prints the value of a specific cookie.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, true))', description: 'Adds a non-secure, HTTP-only cookie.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getName().startsWith("prefix")).collect(Collectors.toList())', description: 'Retrieves all cookies with names starting with a specific prefix.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, false))', description: 'Adds a secure, non-HTTP-only cookie.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, true))', description: 'Adds a non-secure, HTTP-only cookie.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", null, true, true))', description: 'Adds a secure, HTTP-only cookie with no expiry date.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, false))', description: 'Adds a secure, non-HTTP-only cookie with expiry date.' },
        { code: 'driver.manage().getCookies().stream().map(cookie -> cookie.getName() + "=" + cookie.getValue()).collect(Collectors.joining("; "))', description: 'Creates a string representation of all cookies in a format suitable for sending in HTTP headers.' }
      ] },
    { id: 'screen-capture', title: 'Screen Capture Commands', commands: [
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot and returns it as a File object.' },
        { code: 'File screenshot = driver.getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot and stores it in a File variable.' },
        { code: 'FileUtils.copyFile(screenshot, new File("path/to/screenshot.png"))', description: 'Copies the screenshot file to a specified location.' },
        { code: 'driver.getScreenshotAs(OutputType.BYTES)', description: 'Captures a screenshot and returns it as a byte array.' },
        { code: 'byte[] screenshotBytes = driver.getScreenshotAs(OutputType.BYTES)', description: 'Captures a screenshot and stores it as a byte array.' },
        { code: 'BufferedImage image = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Reads the screenshot file into a BufferedImage.' },
        { code: 'ImageIO.write(image, "png", new File("path/to/screenshot.png"))', description: 'Writes the BufferedImage to a file in PNG format.' },
        { code: 'driver.manage().window().getSize()', description: 'Retrieves the size of the current window for use in custom screenshot implementations.' },
        { code: 'driver.manage().window().setSize(new Dimension(1024, 768))', description: 'Resizes the current window to the specified dimensions before taking a screenshot.' },
        { code: 'File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot from a WebDriver instance cast to TakesScreenshot.' },
        { code: '((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE)', description: 'Directly captures a screenshot from a TakesScreenshot instance.' },
        { code: 'FileUtils.copyFile(((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE), new File("path/to/screenshot.png"))', description: 'Copies the screenshot file to a specified location.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot of the current page and returns it as a File object.' },
        { code: 'File screenshot = driver.getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot and stores it as a File object.' },
        { code: 'BufferedImage bufferedImage = ImageIO.read(screenshot)', description: 'Converts the screenshot file to a BufferedImage.' },
        { code: 'ImageIO.write(bufferedImage, "png", new File("path/to/screenshot.png"))', description: 'Saves the BufferedImage as a PNG file.' },
        { code: 'driver.getScreenshotAs(OutputType.BASE64)', description: 'Captures a screenshot and returns it as a Base64-encoded string.' },
        { code: 'String screenshotBase64 = driver.getScreenshotAs(OutputType.BASE64)', description: 'Captures a screenshot and stores it as a Base64-encoded string.' },
        { code: 'byte[] screenshotBytes = ((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)', description: 'Captures a screenshot and stores it as a byte array.' },
        { code: 'driver.getScreenshotAs(OutputType.BYTES)', description: 'Retrieves the screenshot as a byte array for custom handling.' },
        { code: 'FileUtils.copyFile(((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE), new File("path/to/screenshot.png"))', description: 'Saves the screenshot to a specified file.' },
        { code: 'BufferedImage image = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Reads the screenshot file into a BufferedImage for further processing.' },
        { code: 'ImageIO.write(image, "png", new File("path/to/screenshot.png"))', description: 'Writes the BufferedImage to a PNG file for storage.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Takes a screenshot and returns it as a file object for saving.' },
        { code: 'FileUtils.copyFile(screenshotFile, new File("path/to/screenshot.png"))', description: 'Copies the screenshot file to a specific path.' },
        { code: 'BufferedImage screenshotImage = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Loads the screenshot image for manipulation or validation.' },
        { code: 'ImageIO.write(screenshotImage, "png", new File("path/to/screenshot.png"))', description: 'Saves the loaded screenshot image to a PNG file.' },
        { code: 'driver.getScreenshotAs(OutputType.BYTES)', description: 'Captures a screenshot as a byte array for further use in testing.' },
        { code: 'byte[] screenshotData = driver.getScreenshotAs(OutputType.BYTES)', description: 'Retrieves the screenshot data as a byte array.' },
        { code: 'driver.getScreenshotAs(OutputType.BASE64)', description: 'Gets the screenshot as a Base64-encoded string for web-based applications.' },
        { code: 'String screenshotBase64String = driver.getScreenshotAs(OutputType.BASE64)', description: 'Captures and stores the screenshot as a Base64-encoded string.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Takes a screenshot and stores it in a File object for saving or processing.' },
        { code: 'FileUtils.copyFile(((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE), new File("path/to/screenshot.png"))', description: 'Saves the screenshot to a file location.' },
        { code: 'BufferedImage screenshotBufferedImage = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Converts the screenshot file to a BufferedImage for image processing.' },
        { code: 'ImageIO.write(screenshotBufferedImage, "png", new File("path/to/screenshot.png"))', description: 'Saves the BufferedImage to a PNG file.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Takes a screenshot and returns a File object containing the screenshot.' },
        { code: 'File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE)', description: 'Captures the screenshot as a File object for further use.' },
        { code: 'BufferedImage bufferedImage = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Reads the screenshot image into a BufferedImage object.' },
        { code: 'ImageIO.write(bufferedImage, "png", new File("path/to/screenshot.png"))', description: 'Writes the BufferedImage to a file in PNG format.' },
        { code: 'driver.getScreenshotAs(OutputType.BYTES)', description: 'Retrieves the screenshot in byte array format for custom handling.' },
        { code: 'byte[] screenshotBytes = ((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)', description: 'Gets the screenshot as a byte array.' },
        { code: 'driver.getScreenshotAs(OutputType.BASE64)', description: 'Gets the screenshot as a Base64 string for transmission.' },
        { code: 'String screenshotBase64 = driver.getScreenshotAs(OutputType.BASE64)', description: 'Retrieves the screenshot as a Base64-encoded string.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Captures a screenshot and returns it as a File object.' },
        { code: 'FileUtils.copyFile(((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE), new File("path/to/screenshot.png"))', description: 'Saves the screenshot to a specified file path.' },
        { code: 'BufferedImage bufferedImage = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Converts the screenshot file to a BufferedImage.' },
        { code: 'ImageIO.write(bufferedImage, "png", new File("path/to/screenshot.png"))', description: 'Saves the BufferedImage as a PNG file.' },
        { code: 'driver.getScreenshotAs(OutputType.BYTES)', description: 'Retrieves the screenshot as a byte array for processing.' },
        { code: 'byte[] screenshotByteArray = driver.getScreenshotAs(OutputType.BYTES)', description: 'Gets the screenshot in byte array format.' },
        { code: 'driver.getScreenshotAs(OutputType.BASE64)', description: 'Captures the screenshot as a Base64 string.' },
        { code: 'String screenshotBase64String = driver.getScreenshotAs(OutputType.BASE64)', description: 'Retrieves the screenshot as a Base64-encoded string.' },
        { code: 'driver.getScreenshotAs(OutputType.FILE)', description: 'Takes a screenshot and returns it as a File object for saving.' },
        { code: 'FileUtils.copyFile(((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE), new File("path/to/screenshot.png"))', description: 'Copies and saves the screenshot file.' },
        { code: 'BufferedImage image = ImageIO.read(new File("path/to/screenshot.png"))', description: 'Reads the screenshot image into a BufferedImage for manipulation.' },
        { code: 'ImageIO.write(image, "png", new File("path/to/screenshot.png"))', description: 'Writes the BufferedImage to a PNG file.' }
      ] },
    { id: 'session', title: 'Session Management Commands', commands: [
        { code: 'driver.manage().getCookies()', description: 'Retrieves all cookies visible to the current page, which can be used for session management.' },
        { code: 'driver.manage().getCookieNamed("cookieName")', description: 'Retrieves a specific cookie by its name, useful for checking session data.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a new cookie, which can be used to manage session data.' },
        { code: 'driver.manage().deleteCookieNamed("cookieName")', description: 'Deletes a specific cookie, useful for ending a session.' },
        { code: 'driver.manage().deleteCookie(cookie)', description: 'Deletes a specific cookie object from the session.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies associated with the current domain, effectively ending the session.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getName()', description: 'Retrieves the name of a specific cookie for session management.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getValue()', description: 'Retrieves the value of a specific cookie, useful for session validation.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getDomain()', description: 'Retrieves the domain of a specific cookie, important for session scope.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getPath()', description: 'Retrieves the path of a specific cookie, affecting session management.' },
        { code: 'driver.manage().getCookieNamed("cookieName").getExpiry()', description: 'Retrieves the expiry date of a specific cookie, which can affect session duration.' },
        { code: 'driver.manage().getCookies().size()', description: 'Retrieves the number of cookies visible to the current page, which can indicate active sessions.' },
        { code: 'driver.manage().getCookies().contains(new Cookie("name", "value"))', description: 'Checks if a specific cookie exists, useful for verifying active sessions.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> "name".equals(cookie.getName())).findFirst()', description: 'Finds a specific cookie by name for session validation.' },
        { code: 'driver.manage().getCookies().forEach(cookie -> System.out.println(cookie.getName() + ": " + cookie.getValue()))', description: 'Prints all cookies, useful for debugging sessions.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date()))', description: 'Adds a new cookie with domain, path, and expiry date, managing session attributes.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, null, new Date()))', description: 'Adds a new cookie with only name, value, and expiry date, affecting session duration.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path"))', description: 'Adds a new cookie with domain and path, which can be used for session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, "/path"))', description: 'Adds a new cookie with path only, affecting session scope.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", null, new Date()))', description: 'Adds a new cookie with domain and expiry date, which affects session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", null, null, new Date()))', description: 'Adds a new cookie with expiry date only, affecting session duration.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain"))', description: 'Adds a new cookie with domain only, used for session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "/path"))', description: 'Adds a new cookie with path only, affecting session scope.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a new cookie with default domain and path, which can affect the session.' },
        { code: 'driver.manage().getCookieNamed("cookieName").toString()', description: 'Converts a specific cookie to a string representation, useful for debugging sessions.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, true))', description: 'Adds a secure and HTTP-only cookie for session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, false))', description: 'Adds a non-secure and non-HTTP-only cookie, affecting session security.' },
        { code: 'driver.manage().deleteCookie(new Cookie("name", "value"))', description: 'Deletes a cookie based on its name and value, ending a session.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies for the current domain, effectively ending all sessions.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getExpiry() != null).collect(Collectors.toList())', description: 'Retrieves all cookies with expiry dates, affecting session duration.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getDomain().equals("domain")).collect(Collectors.toList())', description: 'Retrieves all cookies for a specific domain, useful for managing session scope.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getPath().equals("/path")).collect(Collectors.toList())', description: 'Retrieves all cookies for a specific path, useful for managing session scope.' },
        { code: 'driver.manage().getCookieNamed("cookieName").isHttpOnly()', description: 'Checks if a specific cookie is HTTP-only, affecting session security.' },
        { code: 'driver.manage().getCookieNamed("cookieName").isSecure()', description: 'Checks if a specific cookie is secure, important for session security.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true))', description: 'Adds a secure cookie with expiry date, managing session attributes.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", null, false))', description: 'Adds a non-secure cookie without expiry date, affecting session management.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> "name".equals(cookie.getName())).forEach(cookie -> System.out.println(cookie.getValue()))', description: 'Retrieves and prints the value of a specific cookie for session validation.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, true))', description: 'Adds a non-secure, HTTP-only cookie, managing session security.' },
        { code: 'driver.manage().getCookies().stream().filter(cookie -> cookie.getName().startsWith("prefix")).collect(Collectors.toList())', description: 'Retrieves all cookies with names starting with a specific prefix, useful for session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, false))', description: 'Adds a secure, non-HTTP-only cookie with expiry date, managing session security.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), false, true))', description: 'Adds a non-secure, HTTP-only cookie with expiry date, managing session attributes.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", null, true, true))', description: 'Adds a secure, HTTP-only cookie with no expiry date, affecting session management.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value", "domain", "/path", new Date(), true, false))', description: 'Adds a secure, non-HTTP-only cookie with expiry date, managing session attributes.' },
        { code: 'driver.manage().getCookies().stream().map(cookie -> cookie.getName() + "=" + cookie.getValue()).collect(Collectors.joining("; "))', description: 'Creates a string representation of all cookies, useful for session management in HTTP headers.' }
      ] },
    { id: 'browser-options', title: 'Browser Options and Capabilities Commands', commands: [
        { code: 'driver.manage().window().setSize(new Dimension(width, height))', description: 'Sets the browser window size, useful for testing different screen resolutions.' },
        { code: 'driver.manage().window().setPosition(new Point(x, y))', description: 'Sets the position of the browser window on the screen.' },
        { code: 'driver.manage().window().fullscreen()', description: 'Maximizes the browser window to full screen.' },
        { code: 'driver.manage().window().maximize()', description: 'Maximizes the browser window to fit the screen.' },
        { code: 'driver.manage().window().minimize()', description: 'Minimizes the browser window.' },
        { code: 'driver.manage().window().getSize()', description: 'Retrieves the current size of the browser window.' },
        { code: 'driver.manage().window().getPosition()', description: 'Retrieves the current position of the browser window.' },
        { code: 'driver.manage().window().getRect()', description: 'Retrieves the size and position of the browser window.' },
        { code: 'driver.manage().window().setRect(new Rectangle(x, y, width, height))', description: 'Sets the size and position of the browser window.' },
        { code: 'ChromeOptions options = new ChromeOptions()', description: 'Initializes ChromeOptions for configuring Chrome browser settings.' },
        { code: 'options.addArguments("start-maximized")', description: 'Adds an argument to start the Chrome browser maximized.' },
        { code: 'options.addArguments("disable-popup-blocking")', description: 'Disables popup blocking in the Chrome browser.' },
        { code: 'options.addArguments("incognito")', description: 'Launches Chrome in incognito mode.' },
        { code: 'options.addArguments("headless")', description: 'Runs Chrome in headless mode (without GUI).' },
        { code: 'options.addArguments("disable-extensions")', description: 'Disables all extensions in the Chrome browser.' },
        { code: 'options.addArguments("disable-gpu")', description: 'Disables GPU hardware acceleration in Chrome.' },
        { code: 'options.addArguments("no-sandbox")', description: 'Runs Chrome without sandboxing for testing purposes.' },
        { code: 'options.addArguments("remote-debugging-port=9222")', description: 'Enables remote debugging on port 9222 for Chrome.' },
        { code: 'options.setBinary("/path/to/chrome")', description: 'Sets the path to a specific Chrome binary.' },
        { code: 'FirefoxOptions options = new FirefoxOptions()', description: 'Initializes FirefoxOptions for configuring Firefox browser settings.' },
        { code: 'options.addArguments("-headless")', description: 'Runs Firefox in headless mode (without GUI).' },
        { code: 'options.addArguments("-private")', description: 'Launches Firefox in private browsing mode.' },
        { code: 'options.addArguments("-disable-popup-blocking")', description: 'Disables popup blocking in Firefox.' },
        { code: 'options.addArguments("-disable-extensions")', description: 'Disables all extensions in Firefox.' },
        { code: 'options.addArguments("-no-sandbox")', description: 'Runs Firefox without sandboxing for testing purposes.' },
        { code: 'options.setBinary("/path/to/firefox")', description: 'Sets the path to a specific Firefox binary.' },
        { code: 'DesiredCapabilities capabilities = new DesiredCapabilities()', description: 'Initializes DesiredCapabilities for configuring browser settings.' },
        { code: 'capabilities.setCapability("browserName", "chrome")', description: 'Sets the browser name to Chrome in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("browserVersion", "89.0")', description: 'Sets the browser version in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("platformName", "Windows 10")', description: 'Sets the platform (OS) in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("acceptInsecureCerts", true)', description: 'Accepts insecure SSL certificates in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("javascriptEnabled", true)', description: 'Enables JavaScript in the browser.' },
        { code: 'capabilities.setCapability("pageLoadStrategy", "eager")', description: 'Sets the page load strategy to eager (waits until the page is interactive).' },
        { code: 'capabilities.setCapability("timeouts", new HashMap<String, Object>() {{ put("implicit", 5000); put("pageLoad", 60000); }})', description: 'Configures timeouts for implicit waits and page loads.' },
        { code: 'options.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true)', description: 'Accepts SSL certificates in browser options.' },
        { code: 'options.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.IGNORE)', description: 'Ignores unexpected alerts in the browser.' },
        { code: 'options.setCapability("proxy", proxy)', description: 'Configures a proxy server for browser options.' },
        { code: 'capabilities.setCapability("maxInstances", 5)', description: 'Sets the maximum number of browser instances to be run concurrently.' },
        { code: 'capabilities.setCapability("browserName", "firefox")', description: 'Sets the browser name to Firefox in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("browserVersion", "90.0")', description: 'Sets the browser version to Firefox 90.0 in DesiredCapabilities.' },
        { code: 'capabilities.setCapability("platformName", "macOS")', description: 'Sets the platform (OS) to macOS in DesiredCapabilities.' },
        { code: 'options.setCapability("browserName", "MicrosoftEdge")', description: 'Sets the browser name to Microsoft Edge.' },
        { code: 'options.setCapability("browserVersion", "latest")', description: 'Sets the browser version to the latest version available.' },
        { code: 'options.setCapability("platformName", "Linux")', description: 'Sets the platform (OS) to Linux in DesiredCapabilities.' },
        { code: 'options.addArguments("start-maximized")', description: 'Configures the browser to start maximized by default.' },
        { code: 'options.addArguments("disable-popup-blocking")', description: 'Disables the popup blocking feature in the browser.' },
        { code: 'options.addArguments("disable-gpu")', description: 'Disables GPU hardware acceleration in the browser.' },
        { code: 'options.addArguments("headless")', description: 'Runs the browser in headless mode for testing without a GUI.' },
        { code: 'options.setCapability("acceptInsecureCerts", true)', description: 'Configures the browser to accept insecure SSL certificates.' },
        { code: 'options.setCapability("proxy", proxy)', description: 'Sets up a proxy for the browser.' },
        { code: 'capabilities.setCapability("enableVNC", true)', description: 'Enables VNC (Virtual Network Computing) for remote debugging.' },
        { code: 'capabilities.setCapability("enableVideo", true)', description: 'Enables video recording of the test session.' }
      ] },
    { id: 'logs', title: 'Logs Management Commands', commands: [
        { code: 'driver.manage().logs().get("browser")', description: 'Retrieves browser logs, which can help in debugging browser-related issues.' },
        { code: 'driver.manage().logs().get("driver")', description: 'Retrieves driver logs, useful for debugging issues related to the WebDriver.' },
        { code: 'driver.manage().logs().get("client")', description: 'Retrieves client logs, providing information about the client-side of the browser session.' },
        { code: 'driver.manage().logs().get("performance")', description: 'Retrieves performance logs, which can be used to analyze browser performance.' },
        { code: 'driver.manage().logs().get("server")', description: 'Retrieves server logs, useful for analyzing server-side interactions.' },
        { code: 'driver.manage().logs().get("logType")', description: 'Retrieves logs for a specific type, where "logType" can be "browser", "driver", "client", "performance", or "server".' },
        { code: 'driver.manage().logs().get("browser").getAll()', description: 'Retrieves all browser logs from the current session.' },
        { code: 'driver.manage().logs().get("browser").get(0)', description: 'Retrieves the first entry from the browser logs.' },
        { code: 'driver.manage().logs().get("browser").get(1)', description: 'Retrieves the second entry from the browser logs.' },
        { code: 'driver.manage().logs().get("browser").get(2)', description: 'Retrieves the third entry from the browser logs.' },
        { code: 'driver.manage().logs().get("browser").get(3)', description: 'Retrieves the fourth entry from the browser logs.' },
        { code: 'driver.manage().logs().get("browser").get(4)', description: 'Retrieves the fifth entry from the browser logs.' },
        { code: 'driver.manage().logs().get("driver").getAll()', description: 'Retrieves all driver logs from the current session.' },
        { code: 'driver.manage().logs().get("driver").get(0)', description: 'Retrieves the first entry from the driver logs.' },
        { code: 'driver.manage().logs().get("driver").get(1)', description: 'Retrieves the second entry from the driver logs.' },
        { code: 'driver.manage().logs().get("driver").get(2)', description: 'Retrieves the third entry from the driver logs.' },
        { code: 'driver.manage().logs().get("driver").get(3)', description: 'Retrieves the fourth entry from the driver logs.' },
        { code: 'driver.manage().logs().get("driver").get(4)', description: 'Retrieves the fifth entry from the driver logs.' },
        { code: 'driver.manage().logs().get("client").getAll()', description: 'Retrieves all client logs from the current session.' },
        { code: 'driver.manage().logs().get("client").get(0)', description: 'Retrieves the first entry from the client logs.' },
        { code: 'driver.manage().logs().get("client").get(1)', description: 'Retrieves the second entry from the client logs.' },
        { code: 'driver.manage().logs().get("client").get(2)', description: 'Retrieves the third entry from the client logs.' },
        { code: 'driver.manage().logs().get("client").get(3)', description: 'Retrieves the fourth entry from the client logs.' },
        { code: 'driver.manage().logs().get("client").get(4)', description: 'Retrieves the fifth entry from the client logs.' },
        { code: 'driver.manage().logs().get("performance").getAll()', description: 'Retrieves all performance logs from the current session.' },
        { code: 'driver.manage().logs().get("performance").get(0)', description: 'Retrieves the first entry from the performance logs.' },
        { code: 'driver.manage().logs().get("performance").get(1)', description: 'Retrieves the second entry from the performance logs.' },
        { code: 'driver.manage().logs().get("performance").get(2)', description: 'Retrieves the third entry from the performance logs.' },
        { code: 'driver.manage().logs().get("performance").get(3)', description: 'Retrieves the fourth entry from the performance logs.' },
        { code: 'driver.manage().logs().get("performance").get(4)', description: 'Retrieves the fifth entry from the performance logs.' },
        { code: 'driver.manage().logs().get("server").getAll()', description: 'Retrieves all server logs from the current session.' },
        { code: 'driver.manage().logs().get("server").get(0)', description: 'Retrieves the first entry from the server logs.' },
        { code: 'driver.manage().logs().get("server").get(1)', description: 'Retrieves the second entry from the server logs.' },
        { code: 'driver.manage().logs().get("server").get(2)', description: 'Retrieves the third entry from the server logs.' },
        { code: 'driver.manage().logs().get("server").get(3)', description: 'Retrieves the fourth entry from the server logs.' },
        { code: 'driver.manage().logs().get("server").get(4)', description: 'Retrieves the fifth entry from the server logs.' },
        { code: 'driver.manage().logs().get("browser").get(0).getMessage()', description: 'Retrieves the message of the first browser log entry.' },
        { code: 'driver.manage().logs().get("browser").get(0).getTimestamp()', description: 'Retrieves the timestamp of the first browser log entry.' },
        { code: 'driver.manage().logs().get("browser").get(0).getLevel()', description: 'Retrieves the log level of the first browser log entry.' },
        { code: 'driver.manage().logs().get("driver").get(0).getMessage()', description: 'Retrieves the message of the first driver log entry.' },
        { code: 'driver.manage().logs().get("driver").get(0).getTimestamp()', description: 'Retrieves the timestamp of the first driver log entry.' },
        { code: 'driver.manage().logs().get("driver").get(0).getLevel()', description: 'Retrieves the log level of the first driver log entry.' },
        { code: 'driver.manage().logs().get("client").get(0).getMessage()', description: 'Retrieves the message of the first client log entry.' },
        { code: 'driver.manage().logs().get("client").get(0).getTimestamp()', description: 'Retrieves the timestamp of the first client log entry.' },
        { code: 'driver.manage().logs().get("client").get(0).getLevel()', description: 'Retrieves the log level of the first client log entry.' },
        { code: 'driver.manage().logs().get("performance").get(0).getMessage()', description: 'Retrieves the message of the first performance log entry.' },
        { code: 'driver.manage().logs().get("performance").get(0).getTimestamp()', description: 'Retrieves the timestamp of the first performance log entry.' },
        { code: 'driver.manage().logs().get("performance").get(0).getLevel()', description: 'Retrieves the log level of the first performance log entry.' },
        { code: 'driver.manage().logs().get("server").get(0).getMessage()', description: 'Retrieves the message of the first server log entry.' },
        { code: 'driver.manage().logs().get("server").get(0).getTimestamp()', description: 'Retrieves the timestamp of the first server log entry.' },
        { code: 'driver.manage().logs().get("server").get(0).getLevel()', description: 'Retrieves the log level of the first server log entry.' },
        { code: 'driver.manage().logs().get("browser").get(0).get("message")', description: 'Retrieves the message of the first browser log entry in a specific format.' },
        { code: 'driver.manage().logs().get("driver").get(0).get("message")', description: 'Retrieves the message of the first driver log entry in a specific format.' },
        { code: 'driver.manage().logs().get("client").get(0).get("message")', description: 'Retrieves the message of the first client log entry in a specific format.' },
        { code: 'driver.manage().logs().get("performance").get(0).get("message")', description: 'Retrieves the message of the first performance log entry in a specific format.' },
        { code: 'driver.manage().logs().get("server").get(0).get("message")', description: 'Retrieves the message of the first server log entry in a specific format.' }
      ] },
    { id: 'javascript', title: 'JavaScript Execution Commands', commands: [
        { code: 'driver.executeScript("return document.title")', description: 'Executes JavaScript to return the title of the current page.' },
        { code: 'driver.executeScript("window.scrollTo(0, document.body.scrollHeight)")', description: 'Scrolls to the bottom of the page.' },
        { code: 'driver.executeScript("window.scrollTo(0, 0)")', description: 'Scrolls to the top of the page.' },
        { code: 'driver.executeScript("arguments[0].click()", element)', description: 'Clicks on the specified element using JavaScript.' },
        { code: 'driver.executeScript("return arguments[0].innerHTML", element)', description: 'Returns the inner HTML of the specified element.' },
        { code: 'driver.executeScript("return arguments[0].value", element)', description: 'Returns the value of the specified form element.' },
        { code: 'driver.executeScript("arguments[0].style.backgroundColor = \'yellow\'", element)', description: 'Changes the background color of the specified element to yellow.' },
        { code: 'driver.executeScript("return window.location.href")', description: 'Returns the current URL of the page.' },
        { code: 'driver.executeScript("window.location.href = \'http://example.com\'")', description: 'Navigates to the specified URL.' },
        { code: 'driver.executeScript("return document.readyState")', description: 'Returns the current state of the document (e.g., \'loading\', \'interactive\', \'complete\').' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').textContent")', description: 'Returns the text content of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').value = \'new value\'")', description: 'Sets the value of the specified input element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').setAttribute(\'attribute\', \'value\')")', description: 'Sets an attribute of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').getAttribute(\'attribute\')")', description: 'Retrieves the value of an attribute of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').focus()")', description: 'Focuses on the specified element.' },
        { code: 'driver.executeScript("return window.getComputedStyle(document.querySelector(\'selector\')).getPropertyValue(\'property\')")', description: 'Returns the computed style property value of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').blur()")', description: 'Removes focus from the specified element.' },
        { code: 'driver.executeScript("return document.querySelectorAll(\'selector\').length")', description: 'Returns the number of elements matching the selector.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').scrollIntoView()")', description: 'Scrolls the specified element into view.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').remove()")', description: 'Removes the specified element from the DOM.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').classList")', description: 'Returns the class list of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').classList.add(\'class-name\')")', description: 'Adds a class to the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').classList.remove(\'class-name\')")', description: 'Removes a class from the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').checked")', description: 'Returns whether the specified checkbox or radio button is checked.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').click()")', description: 'Clicks on the specified element using JavaScript.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').dataset.attribute")', description: 'Returns the value of a data attribute of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').setAttribute(\'data-attribute\', \'value\')")', description: 'Sets a data attribute of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').innerHTML")', description: 'Returns the inner HTML of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').innerHTML = \'new content\'")', description: 'Sets the inner HTML of the specified element.' },
        { code: 'driver.executeScript("return window.performance.timing")', description: 'Returns performance timing information of the current page.' },
        { code: 'driver.executeScript("return window.localStorage.getItem(\'key\')")', description: 'Retrieves a value from local storage.' },
        { code: 'driver.executeScript("window.localStorage.setItem(\'key\', \'value\')")', description: 'Sets a value in local storage.' },
        { code: 'driver.executeScript("return window.sessionStorage.getItem(\'key\')")', description: 'Retrieves a value from session storage.' },
        { code: 'driver.executeScript("window.sessionStorage.setItem(\'key\', \'value\')")', description: 'Sets a value in session storage.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').scrollHeight")', description: 'Returns the scroll height of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').offsetWidth")', description: 'Returns the offset width of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').offsetHeight")', description: 'Returns the offset height of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').offsetTop")', description: 'Returns the offset top of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').offsetLeft")', description: 'Returns the offset left of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').setAttribute(\'style\', \'property:value\')")', description: 'Sets a CSS style property of the specified element.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').dispatchEvent(new Event(\'event-type\'))")', description: 'Dispatches a custom event on the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').dataset")', description: 'Returns all data attributes of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').hasAttribute(\'attribute\')")', description: 'Checks if the specified element has the given attribute.' },
        { code: 'driver.executeScript("document.querySelector(\'selector\').setAttribute(\'attribute\', \'value\')")', description: 'Sets an attribute of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').childNodes.length")', description: 'Returns the number of child nodes of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').parentNode")', description: 'Returns the parent node of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').nextElementSibling")', description: 'Returns the next sibling element of the specified element.' },
        { code: 'driver.executeScript("return document.querySelector(\'selector\').previousElementSibling")', description: 'Returns the previous sibling element of the specified element.' },
        { code: 'driver.executeScript("return window.getComputedStyle(document.querySelector(\'selector\')).visibility")', description: 'Returns the visibility style property value of the specified element.' },
        { code: 'driver.executeScript("return window.getComputedStyle(document.querySelector(\'selector\')).display")', description: 'Returns the display style property value of the specified element.' }
      ] },
    { 
      id: 'file-upload-download', 
      title: 'File Upload and Download Commands', 
      subcategories: [
        {
          id: 'file-upload',
          title: 'File Upload Commands',
          commands: [
            { code: 'driver.findElement(By.cssSelector("input[type=\'file\']")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with type \'file\'.' },
            { code: 'driver.findElement(By.id("file-upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific ID.' },
            { code: 'driver.findElement(By.name("file")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific name.' },
            { code: 'driver.findElement(By.xpath("//input[@type=\'file\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element.' },
            { code: 'driver.findElement(By.cssSelector("input.upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to a file input element with a specific class.' },
            { code: 'driver.findElement(By.cssSelector("input[type=\'file\']")).sendKeys("/absolute/path/to/file")', description: 'Uploads a file using the absolute path to the file input element.' },
            { code: 'driver.findElement(By.id("uploadButton")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an element used for file uploads.' },
            { code: 'driver.findElement(By.xpath("//input[@name=\'fileUpload\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element by its name attribute.' },
            { code: 'driver.findElement(By.cssSelector("input#file-upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific CSS ID.' },
            { code: 'driver.findElement(By.className("file-input")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific class name.' },
            { code: 'driver.findElement(By.xpath("//input[@id=\'file-upload\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element by its ID.' },
            { code: 'driver.findElement(By.cssSelector("input.file")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific class name.' },
            { code: 'driver.findElement(By.name("uploadFile")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific name.' },
            { code: 'driver.findElement(By.id("fileUpload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific ID.' },
            { code: 'driver.findElement(By.xpath("//input[contains(@id, \'upload\')]")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element by a partial ID match.' },
            { code: 'driver.findElement(By.cssSelector("input[type=\'file\'][name=\'fileUpload\']")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with both type and name attributes.' },
            { code: 'driver.findElement(By.cssSelector("input#upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific CSS ID.' },
            { code: 'driver.findElement(By.name("fileUpload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific name.' },
            { code: 'driver.findElement(By.className("upload-file")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific class.' },
            { code: 'driver.findElement(By.xpath("//input[@type=\'file\' and @name=\'file\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element by type and name attributes.' },
            { code: 'driver.findElement(By.cssSelector("input[type=\'file\'][id=\'fileUpload\']")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with both type and ID attributes.' },
            { code: 'driver.findElement(By.id("file-upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific ID.' },
            { code: 'driver.findElement(By.xpath("//input[@type=\'file\'][@id=\'fileUpload\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element by type and ID attributes.' },
            { code: 'driver.findElement(By.name("fileUpload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific name.' },
            { code: 'driver.findElement(By.className("file-upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific class.' },
            { code: 'driver.findElement(By.cssSelector("input.upload")).sendKeys("/path/to/file")', description: 'Uploads a file by specifying its path to an input element with a specific class.' },
            { code: 'driver.findElement(By.xpath("//input[@type=\'file\']")).sendKeys("/path/to/file")', description: 'Uploads a file using XPath to locate the file input element.' }
          ]
        },
        {
          id: 'file-download',
          title: 'File Download Commands',
          commands: [
            { code: 'driver.get("http://example.com/file-download-url")', description: 'Navigates to the URL for downloading a file.' },
            { code: 'driver.findElement(By.linkText("Download File")).click()', description: 'Clicks a link to download a file based on the link text.' },
            { code: 'driver.findElement(By.cssSelector("a.download")).click()', description: 'Clicks a download link based on its CSS class.' },
            { code: 'driver.findElement(By.xpath("//a[text()=\'Download\']")).click()', description: 'Clicks a download link using XPath based on its visible text.' },
            { code: 'driver.findElement(By.id("download")).click()', description: 'Clicks a download button or link based on its ID.' },
            { code: 'driver.findElement(By.name("downloadFile")).click()', description: 'Clicks a download button or link based on its name attribute.' },
            { code: 'driver.findElement(By.className("download-button")).click()', description: 'Clicks a download button or link based on its class name.' },
            { code: 'driver.findElement(By.xpath("//a[contains(@href, \'download\')]")).click()', description: 'Clicks a download link using XPath based on a partial href attribute.' },
            { code: 'driver.findElement(By.cssSelector("a[href*=\'download\']")).click()', description: 'Clicks a download link based on a partial href attribute using CSS selector.' },
            { code: 'driver.findElement(By.xpath("//button[@id=\'download\']")).click()', description: 'Clicks a download button based on its ID.' },
            { code: 'driver.findElement(By.cssSelector("button.download")).click()', description: 'Clicks a download button based on its CSS class.' },
            { code: 'driver.findElement(By.linkText("Download PDF")).click()', description: 'Clicks a download link based on the link text for PDF files.' },
            { code: 'driver.findElement(By.xpath("//a[@href=\'/files/sample.pdf\']")).click()', description: 'Clicks a download link for a specific file using XPath based on its href attribute.' },
            { code: 'driver.findElement(By.cssSelector("a[href=\'/files/sample.docx\']")).click()', description: 'Clicks a download link for a specific file using CSS selector based on its href attribute.' },
            { code: 'driver.findElement(By.xpath("//a[contains(text(), \'Sample Download\')]")).click()', description: 'Clicks a download link using XPath based on partial text.' },
            { code: 'driver.findElement(By.id("downloadFileButton")).click()', description: 'Clicks a download button based on its ID.' },
            { code: 'driver.findElement(By.xpath("//a[@class=\'file-download\']")).click()', description: 'Clicks a download link using XPath based on its class attribute.' },
            { code: 'driver.findElement(By.linkText("File Download")).click()', description: 'Clicks a download link based on the link text.' },
            { code: 'driver.findElement(By.cssSelector("a.download-link")).click()', description: 'Clicks a download link based on its CSS class.' },
            { code: 'driver.findElement(By.xpath("//button[text()=\'Download\']")).click()', description: 'Clicks a download button using XPath based on its visible text.' },
            { code: 'driver.findElement(By.cssSelector("button.file-download")).click()', description: 'Clicks a download button based on its CSS class.' },
            { code: 'driver.findElement(By.id("fileDownload")).click()', description: 'Clicks a download button based on its ID.' },
            { code: 'driver.findElement(By.name("fileDownload")).click()', description: 'Clicks a download button based on its name attribute.' },
            { code: 'driver.findElement(By.xpath("//a[@data-action=\'download\']")).click()', description: 'Clicks a download link using XPath based on a custom data attribute.' }
          ]
        }
      ],
      commands: [] 
    },
    { id: 'remote', title: 'Remote WebDriver Commands', commands: [
        { code: 'driver.get("URL")', description: 'Navigates to the specified URL in the current browser window.' },
        { code: 'driver.navigate().to("URL")', description: 'Navigates to a new URL.' },
        { code: 'driver.navigate().back()', description: 'Navigates back to the previous page in the browser history.' },
        { code: 'driver.navigate().forward()', description: 'Navigates forward to the next page in the browser history.' },
        { code: 'driver.navigate().refresh()', description: 'Refreshes the current page.' },
        { code: 'driver.quit()', description: 'Closes all browser windows and ends the WebDriver session.' },
        { code: 'driver.close()', description: 'Closes the current browser window.' },
        { code: 'driver.manage().window().maximize()', description: 'Maximizes the current browser window.' },
        { code: 'driver.manage().window().minimize()', description: 'Minimizes the current browser window.' },
        { code: 'driver.manage().window().fullscreen()', description: 'Switches the browser window to fullscreen mode.' },
        { code: 'driver.manage().window().setSize(new Dimension(width, height))', description: 'Sets the size of the browser window.' },
        { code: 'driver.manage().window().setPosition(new Point(x, y))', description: 'Sets the position of the browser window.' },
        { code: 'driver.manage().addCookie(new Cookie("name", "value"))', description: 'Adds a new cookie to the browser.' },
        { code: 'driver.manage().deleteCookieNamed("name")', description: 'Deletes a cookie by its name.' },
        { code: 'driver.manage().deleteAllCookies()', description: 'Deletes all cookies for the current domain.' },
        { code: 'driver.manage().getCookieNamed("name")', description: 'Retrieves a specific cookie by its name.' },
        { code: 'driver.manage().getCookies()', description: 'Retrieves all cookies for the current domain.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the implicit wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the timeout for asynchronous scripts.' },
        { code: 'driver.findElement(By.id("element_id")).click()', description: 'Clicks on an element identified by its ID.' },
        { code: 'driver.findElement(By.name("element_name")).sendKeys("text")', description: 'Sends text to an element identified by its name.' },
        { code: 'driver.findElement(By.xpath("//xpath")).getText()', description: 'Retrieves the text from an element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).getAttribute("attribute_name")', description: 'Retrieves an attribute\'s value from an element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).isDisplayed()', description: 'Checks if an element identified by its class name is displayed.' },
        { code: 'driver.findElement(By.linkText("link_text")).click()', description: 'Clicks on a link identified by its text.' },
        { code: 'driver.findElement(By.partialLinkText("partial_link_text")).click()', description: 'Clicks on a link identified by partial text.' },
        { code: 'driver.findElement(By.tagName("tag_name")).sendKeys("text")', description: 'Sends text to an element identified by its tag name.' },
        { code: 'driver.findElement(By.id("element_id")).submit()', description: 'Submits a form element identified by its ID.' },
        { code: 'driver.findElement(By.name("element_name")).clear()', description: 'Clears the text from an element identified by its name.' },
        { code: 'driver.switchTo().frame("frame_id")', description: 'Switches to a specific iframe by its ID.' },
        { code: 'driver.switchTo().defaultContent()', description: 'Switches back to the main content from an iframe.' },
        { code: 'driver.switchTo().window("window_handle")', description: 'Switches to a specific window by its handle.' },
        { code: 'driver.switchTo().alert().accept()', description: 'Accepts an alert popup.' },
        { code: 'driver.switchTo().alert().dismiss()', description: 'Dismisses an alert popup.' },
        { code: 'driver.switchTo().alert().getText()', description: 'Retrieves the text from an alert popup.' },
        { code: 'driver.switchTo().alert().sendKeys("text")', description: 'Sends text to an alert popup.' },
        { code: 'driver.executeScript("script")', description: 'Executes a JavaScript command.' },
        { code: 'driver.executeAsyncScript("script")', description: 'Executes an asynchronous JavaScript command.' },
        { code: 'driver.manage().logs().get(LogType.BROWSER)', description: 'Retrieves browser logs.' },
        { code: 'driver.manage().logs().get(LogType.PERFORMANCE)', description: 'Retrieves performance logs.' },
        { code: 'driver.manage().logs().get(LogType.CLIENT)', description: 'Retrieves client logs.' },
        { code: 'driver.manage().logs().get(LogType.SERVER)', description: 'Retrieves server logs.' },
        { code: 'driver.manage().window().getSize()', description: 'Retrieves the size of the browser window.' },
        { code: 'driver.manage().window().getPosition()', description: 'Retrieves the position of the browser window.' },
        { code: 'driver.getTitle()', description: 'Retrieves the title of the current page.' },
        { code: 'driver.getCurrentUrl()', description: 'Retrieves the URL of the current page.' },
        { code: 'driver.getPageSource()', description: 'Retrieves the source of the current page.' },
        { code: 'driver.navigate().refresh()', description: 'Refreshes the current page.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures implicit wait time.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum wait time for page load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures script timeout duration.' },
        { code: 'driver.manage().window().getSize()', description: 'Gets the dimensions of the current window.' },
        { code: 'driver.manage().window().getPosition()', description: 'Gets the position of the current window.' }
      ] },
    { id: 'timeout', title: 'WebDriver Timeout Commands', commands: [
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the default wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the timeout for asynchronous scripts.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the implicit wait time for elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum wait time for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time for asynchronous scripts.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the implicit wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the timeout for waiting for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time for scripts to execute.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the implicit wait time for elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time to wait for scripts to execute.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets the default wait time for element location.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures the timeout for waiting for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures the maximum time for asynchronous script execution.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures implicit waits for element interactions.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum wait time for complete page loading.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures script timeout duration.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures default waiting time for elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum time allowed for a page to fully load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets the maximum allowed time for scripts to run.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets timeout for the page to load completely.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Sets timeout for executing scripts.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum wait time for a page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures timeout for script execution.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures implicit waits for element interactions.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures timeout for complete page loading.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum time for script execution.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Configures wait time for locating elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum wait time for a page load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures timeout for executing scripts.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets default wait time for elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Configures timeout for waiting for page to load.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum time for script execution.' },
        { code: 'driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(seconds))', description: 'Sets implicit wait time for elements.' },
        { code: 'driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(seconds))', description: 'Sets the timeout for complete page loading.' },
        { code: 'driver.manage().timeouts().setScriptTimeout(Duration.ofSeconds(seconds))', description: 'Configures maximum time for script execution.' }
      ] },
    { id: 'mobile', title: 'Mobile Web Testing Commands (Specific to Appium)', commands: [
        { code: 'driver.findElement(By.id("element_id")).click()', description: 'Clicks on a web element identified by its ID.' },
        { code: 'driver.findElement(By.name("element_name")).sendKeys("text")', description: 'Sends text to a web element identified by its name.' },
        { code: 'driver.findElement(By.xpath("//xpath")).click()', description: 'Clicks on a web element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).getText()', description: 'Retrieves the text from a web element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).isDisplayed()', description: 'Checks if a web element is displayed.' },
        { code: 'driver.findElement(By.linkText("link_text")).click()', description: 'Clicks on a link identified by its text.' },
        { code: 'driver.findElement(By.partialLinkText("partial_link_text")).click()', description: 'Clicks on a link identified by partial text.' },
        { code: 'driver.findElement(By.tagName("tag_name")).sendKeys("text")', description: 'Sends text to a web element identified by its tag name.' },
        { code: 'driver.findElement(By.id("element_id")).submit()', description: 'Submits a form element identified by its ID.' },
        { code: 'driver.findElement(By.name("element_name")).clear()', description: 'Clears the text from a web element identified by its name.' },
        { code: 'driver.findElement(By.xpath("//xpath")).getAttribute("attribute_name")', description: 'Retrieves the value of an attribute from a web element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).getAttribute("attribute_name")', description: 'Retrieves the value of an attribute from a web element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).click()', description: 'Clicks on a web element identified by its class name.' },
        { code: 'driver.findElement(By.xpath("//xpath")).sendKeys("text")', description: 'Sends text to a web element using XPath.' },
        { code: 'driver.findElement(By.name("element_name")).isEnabled()', description: 'Checks if a web element identified by its name is enabled.' },
        { code: 'driver.findElement(By.id("element_id")).getText()', description: 'Retrieves the text from a web element identified by its ID.' },
        { code: 'driver.findElement(By.linkText("link_text")).getText()', description: 'Retrieves the text from a link identified by its text.' },
        { code: 'driver.findElement(By.xpath("//xpath")).getSize()', description: 'Retrieves the size of a web element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).getSize()', description: 'Retrieves the size of a web element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).getLocation()', description: 'Retrieves the location of a web element identified by its class name.' },
        { code: 'driver.findElement(By.id("element_id")).getLocation()', description: 'Retrieves the location of a web element identified by its ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).isSelected()', description: 'Checks if a web element is selected using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).isSelected()', description: 'Checks if a web element is selected using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).getCssValue("property_name")', description: 'Retrieves the value of a CSS property from a web element identified by its class name.' },
        { code: 'driver.findElement(By.name("element_name")).getCssValue("property_name")', description: 'Retrieves the value of a CSS property from a web element identified by its name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.xpath("//child_xpath")).click()', description: 'Clicks on a child element of a web element identified by its ID.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.className("child_class_name")).click()', description: 'Clicks on a child element of a web element identified by its CSS selector.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.name("child_name")).click()', description: 'Clicks on a child element of a web element identified by its XPath.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.linkText("child_link_text")).click()', description: 'Clicks on a child element of a web element identified by its class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.tagName("tag_name")).sendKeys("text")', description: 'Sends text to a child element of a web element identified by its ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.cssSelector("child_selector")).getText()', description: 'Retrieves the text from a child element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.xpath("//child_xpath")).getText()', description: 'Retrieves the text from a child element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.xpath("//child_xpath")).getAttribute("attribute_name")', description: 'Retrieves the value of an attribute from a child element using class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.linkText("child_link_text")).getCssValue("property_name")', description: 'Retrieves the value of a CSS property from a child element using ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.name("child_name")).getLocation()', description: 'Retrieves the location of a child element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.className("child_class_name")).isDisplayed()', description: 'Checks if a child element is displayed using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.cssSelector("child_selector")).isEnabled()', description: 'Checks if a child element is enabled using class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.xpath("//child_xpath")).isSelected()', description: 'Checks if a child element is selected using ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.linkText("child_link_text")).clear()', description: 'Clears the text from a child element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.className("child_class_name")).submit()', description: 'Submits a child element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.tagName("tag_name")).sendKeys("text")', description: 'Sends text to a child element using class name.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.cssSelector("child_selector")).getAttribute("attribute_name")', description: 'Retrieves the value of an attribute from a child element using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.tagName("tag_name")).getSize()', description: 'Retrieves the size of a child element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.xpath("//child_xpath")).getCssValue("property_name")', description: 'Retrieves the value of a CSS property from a child element using class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.className("child_class_name")).getText()', description: 'Retrieves the text from a child element using ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.tagName("tag_name")).isDisplayed()', description: 'Checks if a child element is displayed using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.name("child_name")).getText()', description: 'Retrieves the text from a child element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.cssSelector("child_selector")).getAttribute("attribute_name")', description: 'Retrieves the value of an attribute from a child element using class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.xpath("//child_xpath")).getSize()', description: 'Retrieves the size of a child element using ID.' },
        { code: 'driver.findElement(By.xpath("//xpath")).findElement(By.linkText("child_link_text")).isEnabled()', description: 'Checks if a child element is enabled using XPath.' },
        { code: 'driver.findElement(By.cssSelector("selector")).findElement(By.name("child_name")).getSize()', description: 'Retrieves the size of a child element using CSS selector.' },
        { code: 'driver.findElement(By.className("class_name")).findElement(By.xpath("//child_xpath")).isSelected()', description: 'Checks if a child element is selected using class name.' },
        { code: 'driver.findElement(By.id("element_id")).findElement(By.className("child_class_name")).getCssValue("property_name")', description: 'Retrieves the value of a CSS property from a child element using ID.' }
      ] },


  ];

  return (
    <DayLayout
      dayNumber={0}
      title="Selenium Commands Cheat Sheet"
      description="Complete Java Selenium WebDriver commands reference organized by categories"
    >
      <div className="max-w-7xl mx-auto">
        <div className="mb-6">
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">Selenium WebDriver Commands</h2>
            <p className="text-gray-700 text-sm mb-3">
              Complete reference guide with {categories.length} categories of Selenium WebDriver commands in Java.
            </p>
            <div className="flex gap-2">
              <button
                onClick={() => setExpandedCategories(categories.map(c => c.id))}
                className="px-3 py-1.5 bg-blue-600 text-white rounded text-xs hover:bg-blue-700"
              >
                Expand All
              </button>
              <button
                onClick={() => setExpandedCategories([])}
                className="px-3 py-1.5 bg-gray-600 text-white rounded text-xs hover:bg-gray-700"
              >
                Collapse All
              </button>
            </div>
          </div>
        </div>

        <div className="space-y-2">
          {categories.map((category, index) => {
            const isExpanded = expandedCategories.includes(category.id);
            
            return (
              <div key={category.id} className="bg-white rounded-lg border border-gray-200 shadow-sm">
                <button
                  onClick={() => toggleCategory(category.id)}
                  className="w-full flex items-center justify-between p-4 text-left hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-center gap-3">
                    <span className="flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-600 rounded-full text-xs font-semibold">
                      {index + 1}
                    </span>
                    <h3 className="text-sm font-semibold text-gray-900">{category.title}</h3>
                    {category.subcategories ? (
                      <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
                        {category.subcategories.reduce((total, sub) => total + sub.commands.length, 0)}
                      </span>
                    ) : category.commands && category.commands.length > 0 && (
                      <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
                        {category.commands.length}
                      </span>
                    )}
                  </div>
                  {isExpanded ? (
                    <ChevronDown className="w-4 h-4 text-gray-500" />
                  ) : (
                    <ChevronRight className="w-4 h-4 text-gray-500" />
                  )}
                </button>
                
                {isExpanded && (
                  <div className="px-4 pb-4">
                    {category.subcategories ? (
                      <div className="space-y-3">
                        {category.subcategories.map((subcategory, subIndex) => {
                          const isSubExpanded = expandedCategories.includes(subcategory.id);
                          return (
                            <div key={subcategory.id} className="border border-gray-200 rounded-lg">
                              <button
                                onClick={() => toggleCategory(subcategory.id)}
                                className="w-full flex items-center justify-between p-3 text-left hover:bg-gray-50 transition-colors rounded-t-lg"
                              >
                                <div className="flex items-center gap-2">
                                  <span className="text-xs font-medium text-gray-700">{subcategory.title}</span>
                                  <span className="bg-green-100 text-green-800 text-xs px-1.5 py-0.5 rounded-full font-medium">
                                    {subcategory.commands.length}
                                  </span>
                                </div>
                                {isSubExpanded ? (
                                  <ChevronDown className="w-3 h-3 text-gray-500" />
                                ) : (
                                  <ChevronRight className="w-3 h-3 text-gray-500" />
                                )}
                              </button>
                              {isSubExpanded && (
                                <div className="p-3 border-t bg-gray-50">
                                  <div className="space-y-2">
                                    {subcategory.commands.map((command, cmdIndex) => (
                                      <div key={cmdIndex} className="bg-white rounded-lg p-2 border border-gray-200 hover:border-blue-300 transition-colors">
                                        <div className="flex items-start gap-2">
                                          <span className="flex-shrink-0 w-5 h-5 bg-blue-100 text-blue-600 rounded-full text-xs font-semibold flex items-center justify-center mt-0.5">
                                            {cmdIndex + 1}
                                          </span>
                                          <div className="flex-1 min-w-0">
                                            <div className="font-mono text-xs bg-gray-50 p-2 rounded border mb-1 text-blue-700 overflow-x-auto">
                                              {command.code}
                                            </div>
                                            <p className="text-gray-600 text-xs leading-relaxed">
                                              {command.description}
                                            </p>
                                          </div>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    ) : category.commands && category.commands.length > 0 ? (
                      <div className="space-y-2">
                        {category.commands.map((command, cmdIndex) => (
                          <div key={cmdIndex} className="bg-white rounded-lg p-3 border border-gray-200 hover:border-blue-300 transition-colors">
                            <div className="flex items-start gap-3">
                              <span className="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full text-xs font-semibold flex items-center justify-center mt-0.5">
                                {cmdIndex + 1}
                              </span>
                              <div className="flex-1 min-w-0">
                                <div className="font-mono text-xs bg-gray-50 p-2 rounded border mb-2 text-blue-700 overflow-x-auto">
                                  {command.code}
                                </div>
                                <p className="text-gray-600 text-xs leading-relaxed">
                                  {command.description}
                                </p>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="bg-gray-50 rounded-lg p-3">
                        <p className="text-gray-600 text-xs">
                          Commands for {category.title.toLowerCase()} will be added here.
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}
        </div>

        <div className="mt-8 bg-gray-50 rounded-lg p-4">
          <h3 className="text-sm font-semibold text-gray-900 mb-2">How to Use This Cheat Sheet</h3>
          <ul className="text-gray-700 space-y-1 text-xs">
            <li>• Click on any category to expand and view the commands</li>
            <li>• Use "Expand All" to see all commands at once</li>
            <li>• Commands are numbered for easy reference</li>
            <li>• Each command includes syntax and description</li>
          </ul>
        </div>
      </div>
    </DayLayout>
  );
}